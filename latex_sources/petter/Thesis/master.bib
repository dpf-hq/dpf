Automatically generated by Mendeley 1.9.2
Any changes to this file will be lost if it is regenerated by Mendeley.

@article{Lamo2013,
author = {Lamo, Y and Wang, X and Mantz, F and Bech, \O and Sandven, a and Rutle, a},
doi = {10.3176/proc.2013.1.02},
file = {:C$\backslash$:/Skole/Dataingeni\o r/Master/INF399 - Masteroppgave/Mendeley Articles/DPF Workbench a multi-level language workbench for MDE.pdf:pdf},
issn = {1736-6046},
journal = {Proceedings of the Estonian Academy of Sciences},
keywords = {diagram predicate framework,diagrammatic modelling,language workbench,meta-,model-driven engineering},
number = {1},
pages = {3},
title = {{DPF Workbench: a multi-level language workbench for MDE}},
url = {http://www.kirj.ee/?id=21933\&tpl=1061\&c\_tpl=1064},
volume = {62},
year = {2013}
}
@book{Awodey2006,
abstract = {This text and reference book on Category Theory, a branch of abstract algebra, is aimed not only at students of Mathematics, but also researchers and students of Computer Science, Logic, Linguistics, Cognitive Science, Philosophy, and any of the other fields that now make use of it. Containing clear definitions of the essential concepts, illuminated with numerous accessible examples, and providing full proofs of all important propositions and theorems, this book aims to make the basic ideas, theorems, and methods of Category Theory understandable to this broad readership. Although it assumes few mathematical pre-requisites, the standard of mathematical rigour is not compromised. The material covered includes the standard core of categories; functors; natural transformations; equivalence; limits and colimits; functor categories; representables; Yoneda's lemma; adjoints; monads. An extra topic of cartesian closed categories and the lambda-calculus is also provided; a must for computer scientists, logicians and linguists!},
author = {Awodey, Steve},
booktitle = {Elements},
isbn = {0199237182},
pages = {272},
publisher = {Oxford University Press},
title = {{Category Theory}},
year = {2006}
}
@article{czarnecki2006feature,
author = {Czarnecki, K. and Helsen, S.},
doi = {10.1147/sj.453.0621},
file = {:C$\backslash$:/Skole/Dataingeni\o r/Master/INF399 - Masteroppgave/Mendeley Articles/Feature-based survey of model transformation approaches.pdf:pdf},
issn = {0018-8670},
journal = {IBM Systems Journal},
number = {3},
pages = {621--645},
title = {{Feature-based survey of model transformation approaches}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5386627},
volume = {45},
year = {2006}
}
@article{specification2006object,
author = {Specification, OMGA},
file = {:C$\backslash$:/Users/Petter/Downloads/formal-06-05-01.pdf:pdf},
number = {May},
title = {{Object Constraint Language}},
url = {http://www.itu.dk/courses/SPT/E2007/Resources/ocl 06-05-01.pdf},
year = {2006}
}
@article{lambers2006conflict,
author = {Lambers, Leen and Ehrig, Hartmut and Orejas, Fernando},
file = {:C$\backslash$:/Skole/Dataingeni\o r/Master/INF399 - Masteroppgave/Mendeley Articles/Conﬂict Detection for Graph Transformation.pdf:pdf},
journal = {Graph Transformations},
pages = {61--76},
title = {{Conflict detection for graph transformation with negative application conditions}},
url = {http://link.springer.com/chapter/10.1007/11841883\_6},
year = {2006}
}
@article{Deursen,
author = {Deursen, Arie Van and Klint, P and Visser, Joost},
file = {:C$\backslash$:/Skole/Dataingeni\o r/Master/INF399 - Masteroppgave/Mendeley Articles/Domain-Speciﬁc Languages.pdf:pdf},
journal = {Sigplan Notices},
title = {{Domain-Specific Languages: An Annotated Bibliography.}},
url = {http://138.26.64.7/courses/cs593/spring2010/DSLAnnotatedBib.pdf},
year = {2000}
}
@book{schwaber2002agile,
abstract = {EXtreme Programming is an ideal many software shops would love to reach, but with the constant pressures to produce software quickly, they cannot actually implement it. The Agile software process allows a company to implement eXtreme Programming quickly and immediately-and to begin producing software incrementally in as little as 30 days! Implementing eXtreme Programming is easier said than done. The process can be time consuming and actually slow down current software projects that are in process. This book shows readers how to use SCRUM, an Agile software development process, to quickly and seamlessly implement XP in their shop-while still producing actual software. Using SCRUM and the Agile process can virtually eliminate all downtime during an XP implementation.},
author = {Schwaber, Ken and Beedle, Mike},
booktitle = {cdswebcernch},
doi = {10.1109/2.947100},
isbn = {0130676349},
issn = {00189162},
keywords = {computer software,development,scrum (computer software development)},
mendeley-tags = {computer software,development,scrum (computer software development)},
pages = {158},
title = {{Agile Software Development with Scrum}},
volume = {18},
year = {2001}
}
@article{corradini2006sesqui,
author = {Corradini, Andrea and Heindel, T and Hermann, F and K\"{o}nig, B},
file = {:C$\backslash$:/Users/Petter/Desktop/sesqui-pushout.pdf:pdf},
journal = {Graph Transformations},
title = {{Sesqui-pushout rewriting}},
url = {http://link.springer.com/chapter/10.1007/11841883\_4},
year = {2006}
}
@book{Barr1990,
author = {Barr, Michael and Wells, Charles},
file = {:C$\backslash$:/Users/Petter/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Barr, Wells - 1990 - Category theory for computing science.pdf:pdf},
keywords = {and phrases,category theory,computing science},
number = {22},
publisher = {Prentice Hall New York},
title = {{Category theory for computing science}},
url = {http://www.emis.ams.org/journals/TAC/reprints/articles/22/tr22.pdf},
year = {1990}
}
@article{poernomo2006meta,
author = {Poernomo, Iman},
file = {:C$\backslash$:/Skole/Dataingeni\o r/Master/INF399 - Masteroppgave/Mendeley Articles/The Meta Object Facility Typed.pdf:pdf},
isbn = {1595931082},
journal = {Proceedings of the 2006 ACM symposium on Applied \ldots},
keywords = {constructive type theory,model driven architecture},
pages = {1845--1849},
title = {{The meta-object facility typed}},
url = {http://dl.acm.org/citation.cfm?id=1141710},
year = {2006}
}
@inproceedings{INSPEC:606170,
abstract = {The paper presents an algebraic theory of graph grammars using homomorphisms and pushout constructions to specify embeddings and direct derivations constructively. It considers the case of arbitrary directed graphs permitting loops and parallel edges and having labels on vertices and edges. The gluing of two arbitrary labeled graphs (push-out) is defined allowing a strictly symmetric definition of direct derivations and the embedding of derivations into a common frame. A two-dimensional hierarchy of graph-grammars is given including the classical case of Chomsky-grammars and several other graph-grammar constructions as special types. The use of well-known categorical constructions and results allows simplification of the proofs and a pregnant formulation of concepts like `parallel composition' and `translation of grammars'},
address = {New York, NY, USA},
annote = {14th Annual Symposium on Switching Automata Theory, 15-17 Oct. 1973,
Iowa City, IA, USA},
author = {Ehrig, H and Pfender, M and Schneider, H J},
booktitle = {14th Annual Symposium on Switching Automata Theory},
organization = {IEEE; Univ. Iowa},
pages = {167--180},
publisher = {IEEE},
title = {{Graph-grammars: an algebraic approach}},
type = {Conference Paper},
year = {1973}
}
@article{jouault2008atl,
author = {Jouault, Fr\'{e}d\'{e}ric and Allilaire, Freddy and B\'{e}zivin, Jean and Kurtev, Ivan},
doi = {10.1016/j.scico.2007.08.002},
file = {:C$\backslash$:/Users/Petter/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Jouault et al. - 2008 - ATL A model transformation tool.pdf:pdf},
issn = {01676423},
journal = {Science of Computer Programming},
month = jun,
number = {1-2},
pages = {31--39},
title = {{ATL: A model transformation tool}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S0167642308000439},
volume = {72},
year = {2008}
}
@article{prieto1990domain,
author = {Prieto-D\'{\i}az, R},
file = {:C$\backslash$:/Skole/Dataingeni\o r/Master/INF399 - Masteroppgave/Mendeley Articles/DOMAIN ANALYSIS AN INTRODUCTION.pdf:pdf},
journal = {ACM SIGSOFT Software Engineering Notes},
number = {2},
pages = {47--54},
title = {{Domain analysis: an introduction}},
url = {http://dl.acm.org/citation.cfm?id=382703},
volume = {15},
year = {1990}
}
@book{Steinberg2009,
author = {Steinberg, David and Budinsky, Frank and Paternostro, Marcelo and Merks, Ed},
isbn = {0321331885},
month = dec,
publisher = {Addison-Wesley Professional},
title = {{EMF: Eclipse Modeling Framework 2.0}},
url = {http://dl.acm.org/citation.cfm?id=1197540},
year = {2009}
}
@book{beck2004extreme,
abstract = {Kent Beck's eXtreme Programming eXplained provides an intriguing high-level overview of the author's Extreme Programming (XP) software development methodology. Written for IS managers, project leaders, or programmers, this guide provides a glimpse at the principles behind XP and its potential advantages for small- to mid-size software development teams. The book intends to describe what XP is, its guiding principles, and how it works. Simply written, the book avoids case studies and concrete details in demonstrating the efficacy of XP. Instead, it demonstrates how XP relies on simplicity, unit testing, programming in pairs, communal ownership of code, and customer input on software to motivate code improvement during the development process. As the author notes, these principles are not new, but when they're combined their synergy fosters a new and arguably better way to build and maintain software. Throughout the book, the author presents and explains these principles, such as "rapid feedback" and "play to win," which form the basis of XP. Generally speaking, XP changes the way programmers work. The book is good at delineating new roles for programmers and managers who Beck calls "coaches." The most striking characteristic of XP is that programmers work in pairs, and that testing is an intrinsic part of the coding process. In a later section, the author even shows where XP works and where it doesn't and offers suggestions for migrating teams and organizations over to the XP process. In the afterword, the author recounts the experiences that led him to develop and refine XP, an insightful section that should inspire any organization to adopt XP. This book serves as a useful introduction to the philosophy and practice of XP for the manager or programmer who wants a potentially better way to build software. -Richard Dragan Topics covered: Extreme Programming (XP) software methodology, principles, XP team roles, facilities design, testing, refactoring, the XP software lifecycle, and adopting XP. Software development projects can be fun, productive, and even daring. Yet they can consistently deliver value to a business and remain under control. Extreme Programming (XP) was conceived and developed to address the specific needs of software development conducted by small teams in the face of vague and changing requirements. This new lightweight methodology challenges many conventional tenets, including the long-held assumption that the cost of changing a piece of software necessarily rises dramatically over the course of time. XP recognizes that projects have to work to achieve this reduction in cost and exploit the savings once they have been earned. Fundamentals of XP include: Distinguishing between the decisions to be made by business interests and those to be made by project stakeholders. Writing unit tests before programming and keeping all of the tests running at all times. Integrating and testing the whole system-several times a day. Producing all software in pairs, two programmers at one screen. Starting projects with a simple design that constantly evolves to add needed flexibility and remove unneeded complexity. Putting a minimal system into production quickly and growing it in whatever directions prove most valuable. Why is XP so controversial? Some sacred cows don't make the cut in XP: Don't force team members to specialize and become analysts, architects, programmers, testers, and integrators-every XP programmer participates in all of these critical activities every day. Don't conduct complete up-front analysis and design-an XP project starts with a quick analysis of the entire system, and XP programmers continue to make analysis and design decisions throughout development. Develop infrastructure and frameworks as you develop your application, not up-front-delivering business value is the heartbeat that drives XP projects. Don't write and maintain implementation documentation-communication in XP projects occurs face-to-face, or through efficient tests and carefully written code. You may love XP or you may hate it, but Extreme Programming Explained will force you to take a fresh look at how you develop software.},
author = {Beck, Kent},
booktitle = {XP Series},
isbn = {0201616416},
issn = {20161641},
keywords = {xp},
mendeley-tags = {xp},
pages = {224},
publisher = {IEEE},
title = {{Extreme Programming Explained: Embrace Change}},
year = {1999}
}
@article{france2007model,
abstract = {The term Model-Driven Engineering (MDE) is typically used to describe software development approaches in which abstract models of software systems are created and systematically transformed to concrete implementations. In this paper we give an overview of current research in MDE and discuss some of the major challenges that must be tackled in order to realize the MDE vision of software development. We argue that full realizations of the MDE vision may not be possible in the near to medium-term primarily because of the wicked problems involved. On the other hand, attempting to realize the vision will provide insights that can be used to significantly reduce the gap between evolving software complexity and the technologies used to manage complexity.},
author = {France, Robert and Rumpe, Bernhard},
doi = {10.1109/FOSE.2007.14},
editor = {Chun, Soon Ae and Janssen, Marijn and Gil-Garcia, J Ramon},
institution = {IEEE},
isbn = {0769528295},
issn = {0018067X},
journal = {Future of Software Engineering FOSE 07},
number = {3},
pages = {37--54},
publisher = {IEEE Computer Society},
series = {FOSE '07},
title = {{Model-driven Development of Complex Software: A Research Roadmap}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4221611},
volume = {25},
year = {2007}
}
@article{Report2007,
author = {Kindler, Ekkart and Wagner, Robert},
file = {:C$\backslash$:/Users/Petter/Desktop/tr-ri-07-284.pdf:pdf},
journal = {University of Paderborn},
title = {{Triple graph grammars: Concepts, extensions, implementations, and application scenarios}},
url = {http://svn-st.inf.tu-dresden.de/svn/reuseware/tags/20100220-emftext-1.2.2/Tornado/de.tudresden.tornado2.metamodel.modelCorrespondence/documentation/TGG-TechnicalReoprt.pdf},
year = {2007}
}
@article{mens2006taxonomy,
author = {Mens, Tom and {Van Gorp}, Pieter},
doi = {10.1016/j.entcs.2005.10.021},
file = {:C$\backslash$:/Skole/Dataingeni\o r/Master/INF399 - Masteroppgave/Articles/Need to read/A Taxonomy of model transformations.pdf:pdf},
issn = {15710661},
journal = {Electronic Notes in Theoretical Computer Science},
keywords = {comparison,mdd,mde,model transformation,taxonomy},
month = mar,
pages = {125--142},
title = {{A Taxonomy of Model Transformation}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S1571066106001435},
volume = {152},
year = {2006}
}
@article{yie2009advanced,
author = {Yie, A and Wagelaar, Dennis},
file = {:C$\backslash$:/Users/Petter/Desktop/Advanced Tracable Links.pdf:pdf},
journal = {\ldots on Model Transformation with ATL},
pages = {1--10},
title = {{Advanced traceability for ATL}},
url = {http://docatlanmod.emn.fr/MtATL2009Presentations/PreliminaryProceedings.pdf\#page=86},
year = {2009}
}
@misc{Rational1998,
abstract = {This paper presents an overview of the Rational Unified Process the Rational Unified Process is a software engineering process, delivered through a web-enabled, searchable knowledge base. The process enhances team productivity and delivers software best practices via guidelines, templates and tool mentors for all critical software lifecycle activities. The knowledge base allows development teams to gain the full benefits of the industry-standard Unified Modeling Language (UML).},
author = {Rational},
booktitle = {Rational Software white Paper TP026B},
pages = {21},
title = {{Rational Unified Process: Best Practices for Software Development Teams}},
year = {1998}
}
@article{taentzer2004agg,
author = {Taentzer, Gabriele},
file = {:C$\backslash$:/Skole/Dataingeni\o r/Master/INF399 - Masteroppgave/Sammenligne M2M/AGG Text.pdf:pdf},
journal = {\ldots of Graph Transformations with Industrial Relevance},
pages = {446--453},
title = {{AGG: A graph transformation environment for modeling and validation of software}},
url = {http://link.springer.com/chapter/10.1007/978-3-540-25959-6\_35},
year = {2004}
}
@article{ehrig1997algebraic,
author = {Ehrig, H. and Heckel, R. and Korff, M. and L\"{o}we, M. and Ribeiro, L. and Wagner, A. and Corradini, A.},
isbn = {98-102288-48},
month = feb,
pages = {247--312},
title = {{Algebraic approaches to graph transformation. Part II: single pushout approach and comparison with double pushout approach}},
url = {http://dl.acm.org/citation.cfm?id=278918.278930},
year = {1997}
}
@article{duval2003diagrammatic,
author = {Duval, Dominique},
doi = {10.1017/S0960129503003979},
file = {:C$\backslash$:/Skole/Dataingeni\o r/Master/INF399 - Masteroppgave/Mendeley Articles/diagspecmscs.pdf:pdf},
issn = {09601295},
journal = {Mathematical Structures in Computer Science},
month = dec,
number = {6},
pages = {857--890},
title = {{Diagrammatic specifications}},
url = {http://www.journals.cambridge.org/abstract\_S0960129503003979},
volume = {13},
year = {2003}
}
@book{Herrlich1973,
author = {Herrlich, Horst and Strecker, GE},
file = {:C$\backslash$:/Skole/Dataingeni\o r/Master/INF399 - Masteroppgave/Mendeley Articles/Category Theroy - Introduction.pdf:pdf},
publisher = {Allyn and Bacon Boston},
title = {{Category theory}},
url = {http://tocs.ulb.tu-darmstadt.de/19858928X.pdf},
year = {1973}
}
@article{corradini1997algebraic,
author = {Loewe, M and Corradini, A and Montanari, U and Rossi, F},
file = {:C$\backslash$:/Users/Petter/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Loewe et al. - 1997 - Algebraic approaches to graph transformation part I Basic concepts and double pushout approach.pdf:pdf},
title = {{Algebraic approaches to graph transformation part I: Basic concepts and double pushout approach}},
url = {http://www.citeulike.org/group/4585/article/3361770},
year = {1997}
}
@article{bauderon1995uniform,
author = {Bauderon, Michel},
file = {:C$\backslash$:/Users/Petter/Desktop/A Uniform Approach to Graph Rewriting The Pullback Approach.pdf:pdf},
journal = {Graph-Theoretic Concepts in Computer Science},
title = {{A uniform approach to graph rewriting: The pullback approach}},
url = {http://link.springer.com/chapter/10.1007/3-540-60618-1\_69},
year = {1995}
}
@article{brown2008graphs,
author = {Brown, R and Morris, I},
file = {:C$\backslash$:/Skole/Dataingeni\o r/Master/INF399 - Masteroppgave/Mendeley Articles/Graphs of morphisms of graphs.pdf:pdf},
journal = {the electronic journal of \ldots},
keywords = {cartesian closed category,digraph,endomorphism monoid,graph,symmetry object,topos},
pages = {1--28},
title = {{Graphs of morphisms of graphs}},
url = {http://www.emis.ams.org/journals/EJC/Volume\_15/PDF/v15i1a1.pdf},
volume = {15},
year = {2008}
}
@article{ehrig1973graph,
author = {Ehrig, H},
journal = {Switching and Automata \ldots},
title = {{Graph-grammars: An algebraic approach}},
url = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=4569741},
year = {1973}
}
@article{diskin2003variable,
author = {Diskin, Zinovy and Kadish, Boris},
doi = {10.1016/S0169-023X(03)00047-8},
file = {:C$\backslash$:/Skole/Dataingeni\o r/Master/INF399 - Masteroppgave/Mendeley Articles/Generalized Sketches.pdf:pdf},
issn = {0169023X},
journal = {Data \& Knowledge Engineering},
keywords = {aggregation,association,category theory,composition,conceptual modeling,entity,er,formal semantics,generalization,keyed,object identity,object-oriented visual modeling,relationship,uml,variable set},
month = oct,
number = {1},
pages = {1--59},
title = {{Variable set semantics for keyed generalized sketches: formal semantics for object identity and abstract syntax for conceptual modeling}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S0169023X03000478},
volume = {47},
year = {2003}
}
@article{kang1990feature,
author = {{Kyo C. Kang} and Cohen, Sholom G. and {James A. Hess} and {William E. Novak} and {A. Spencer Peterson}},
file = {:C$\backslash$:/Skole/Dataingeni\o r/Master/INF399 - Masteroppgave/Mendeley Articles/Feature-Oriented Domain Analysis.pdf:pdf},
isbn = {1111111111},
title = {{Feature-Oriented Domain Analysis (FODA) Feasibility Study}}
}
@article{Cook2008,
author = {Cook, S and Kent, S},
file = {:C$\backslash$:/Skole/Dataingeni\o r/Master/INF399 - Masteroppgave/Mendeley Articles/The Domain-Specific IDE.pdf:pdf},
journal = {UPGRADE, IX},
number = {June},
title = {{The domain-specific ide}},
url = {http://www.cepis.org/files/cepisupgrade/2008-II-kent.pdf},
year = {2008}
}
@book{Henshin_2010,
author = {Arendt, Thorsten and Biermann, Enrico and Jurack, Stefan},
booktitle = {Model Driven \ldots},
file = {:C$\backslash$:/Skole/Dataingeni\o r/Master/INF399 - Masteroppgave/Sammenligne M2M/Arendt, Biermann, Jurack - 2010 - Henshin advanced concepts and tools for in-place EMF model transformations.pdf:pdf},
pages = {121--135},
publisher = {Springer Berlin Heidelberg},
title = {{Henshin: advanced concepts and tools for in-place EMF model transformations}},
url = {http://link.springer.com/chapter/10.1007/978-3-642-16145-2\_9},
year = {2010}
}
@article{kent2002model,
author = {Kent, S},
file = {:C$\backslash$:/Users/Petter/Desktop/download.pdf:pdf},
journal = {Integrated Formal Methods},
number = {2},
pages = {25--31},
title = {{Model driven engineering}},
url = {http://link.springer.com/chapter/10.1007/3-540-47884-1\_16},
volume = {39},
year = {2002}
}
@article{zschaler2010domain,
author = {Zschaler, Steffen and Kolovos, DS and Drivalos, Nikolaos},
file = {:C$\backslash$:/Skole/Dataingeni\o r/Master/INF399 - Masteroppgave/Mendeley Articles/Domain-Specific Metamodelling Languages for Software Language Engineering.pdf:pdf},
journal = {\ldots Language Engineering},
title = {{Domain-specific metamodelling languages for software language engineering}},
url = {http://link.springer.com/chapter/10.1007/978-3-642-12107-4\_23},
year = {2010}
}
