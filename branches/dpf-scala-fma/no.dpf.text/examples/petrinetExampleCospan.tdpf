//Services and services

//Type Graph as Metamodel
TG:=TGraph<DPF>{
    Transition:Node-inArr:Arrow->Place:Node,
    Transition:Node-outArr:Arrow->Place:Node,
    Transition:Node-name:*->String,
    Place:Node-name:*->String,
    Place:Node-token:Arrow->Token:Node,
}

G:=TGraph<TG>{
	
	ToBob:Transition-a:outArr->Bob:Place,
	ToBob:Transition-b:inArr->Alice:Place,
	ToAlice:Transition-c:outArr->Alice:Place,
	ToAlice:Transition-d:inArr->Bob:Place,
	Bob:Place-e:token->t:Token,
	ToBob:Transition-f:name->["To Bob"],
	ToAlice:Transition-g:name->["To Alice"],
	Bob:Place-h:name->["Bob"],
	Alice:Place-i:name->["Alice"],

}


//Rule Graphs:
TI:=ExtSubTGraph<TG>{
    Transition:Node-outArr:Arrow->Place:Node,
    OutArr:Node-src:Arrow->Transition:Node,
    OutArr:Node-trg:Arrow->Place:Node,
    OutArr:Node-weight:*->Int,
}

TL:=ExtSubTGraph<TI>{
    Transition:Node-outArr:Arrow->Place:Node,
}

TR:=ExtSubTGraph<TI>{
    OutArr:Node-src:Arrow->Transition:Node,
    OutArr:Node-trg:Arrow->Place:Node,
    OutArr:Node-weight:*->Int,
}

//Perform Evolution:
simpleEvolution(TL->TI<-TR,G)
