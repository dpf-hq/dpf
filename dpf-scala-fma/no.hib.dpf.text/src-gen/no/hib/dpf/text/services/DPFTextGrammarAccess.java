/*
* generated by Xtext
*/

package no.hib.dpf.text.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DPFTextGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefinitionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_0_0 = (RuleCall)cDefinitionsAssignment_0.eContents().get(0);
		private final Assignment cDefinitionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_1_0 = (RuleCall)cDefinitionsAssignment_1.eContents().get(0);
		
		////Program:
		//Model:
		//	(definitions+=Definition definitions+=Definition*)?;
		public ParserRule getRule() { return rule; }

		//(definitions+=Definition definitions+=Definition*)?
		public Group getGroup() { return cGroup; }

		//definitions+=Definition
		public Assignment getDefinitionsAssignment_0() { return cDefinitionsAssignment_0; }

		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_0_0() { return cDefinitionsDefinitionParserRuleCall_0_0; }

		//definitions+=Definition*
		public Assignment getDefinitionsAssignment_1() { return cDefinitionsAssignment_1; }

		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_1_0() { return cDefinitionsDefinitionParserRuleCall_1_0; }
	}

	public class VALUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VALUE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNUMBERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCHARTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//VALUE:
		//	NUMBER | CHAR | STRING;
		public ParserRule getRule() { return rule; }

		//NUMBER | CHAR | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_0() { return cNUMBERTerminalRuleCall_0; }

		//CHAR
		public RuleCall getCHARTerminalRuleCall_1() { return cCHARTerminalRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstanceSpecificationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSpecificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTGraphParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExtSubTGraphParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMakeEmfParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMakeEcoreParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMakeImageParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSimpleEvoSpanParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSimpleEvoCospanParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cMorphismParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cEvoSpanParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cEvoCospanParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		////
		////Grammar Rules:
		////
		////"Program-Parts":	
		//Definition:
		//	InstanceSpecification | Specification | TGraph | ExtSubTGraph | MakeEmf | MakeEcore | MakeImage | SimpleEvoSpan |
		//	SimpleEvoCospan | Morphism | EvoSpan | EvoCospan;
		public ParserRule getRule() { return rule; }

		//InstanceSpecification | Specification | TGraph | ExtSubTGraph | MakeEmf | MakeEcore | MakeImage | SimpleEvoSpan |
		//SimpleEvoCospan | Morphism | EvoSpan | EvoCospan
		public Alternatives getAlternatives() { return cAlternatives; }

		//InstanceSpecification
		public RuleCall getInstanceSpecificationParserRuleCall_0() { return cInstanceSpecificationParserRuleCall_0; }

		//Specification
		public RuleCall getSpecificationParserRuleCall_1() { return cSpecificationParserRuleCall_1; }

		//TGraph
		public RuleCall getTGraphParserRuleCall_2() { return cTGraphParserRuleCall_2; }

		//ExtSubTGraph
		public RuleCall getExtSubTGraphParserRuleCall_3() { return cExtSubTGraphParserRuleCall_3; }

		//MakeEmf
		public RuleCall getMakeEmfParserRuleCall_4() { return cMakeEmfParserRuleCall_4; }

		//MakeEcore
		public RuleCall getMakeEcoreParserRuleCall_5() { return cMakeEcoreParserRuleCall_5; }

		//MakeImage
		public RuleCall getMakeImageParserRuleCall_6() { return cMakeImageParserRuleCall_6; }

		//SimpleEvoSpan
		public RuleCall getSimpleEvoSpanParserRuleCall_7() { return cSimpleEvoSpanParserRuleCall_7; }

		//SimpleEvoCospan
		public RuleCall getSimpleEvoCospanParserRuleCall_8() { return cSimpleEvoCospanParserRuleCall_8; }

		//Morphism
		public RuleCall getMorphismParserRuleCall_9() { return cMorphismParserRuleCall_9; }

		//EvoSpan
		public RuleCall getEvoSpanParserRuleCall_10() { return cEvoSpanParserRuleCall_10; }

		//EvoCospan
		public RuleCall getEvoCospanParserRuleCall_11() { return cEvoCospanParserRuleCall_11; }
	}

	public class MakeEmfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MakeEmf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MakeEmf:
		//	"emf(" id=ID ")";
		public ParserRule getRule() { return rule; }

		//"emf(" id=ID ")"
		public Group getGroup() { return cGroup; }

		//"emf("
		public Keyword getEmfKeyword_0() { return cEmfKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class MakeEcoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MakeEcore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEcoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MakeEcore:
		//	"ecore(" id=ID ")";
		public ParserRule getRule() { return rule; }

		//"ecore(" id=ID ")"
		public Group getGroup() { return cGroup; }

		//"ecore("
		public Keyword getEcoreKeyword_0() { return cEcoreKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class MakeImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MakeImage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MakeImage:
		//	"image(" id=ID ")";
		public ParserRule getRule() { return rule; }

		//"image(" id=ID ")"
		public Group getGroup() { return cGroup; }

		//"image("
		public Keyword getImageKeyword_0() { return cImageKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class SimpleEvoSpanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleEvoSpan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSimpleEvolutionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLhsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLhsIDTerminalRuleCall_1_0 = (RuleCall)cLhsAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDiffAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDiffIDTerminalRuleCall_3_0 = (RuleCall)cDiffAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRhSAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhSIDTerminalRuleCall_5_0 = (RuleCall)cRhSAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeGraphAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTypeGraphIDTerminalRuleCall_7_0 = (RuleCall)cTypeGraphAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//SimpleEvoSpan:
		//	"simpleEvolution(" lhs=ID "<-" diff=ID "->" rhS=ID "," typeGraph=ID ")";
		public ParserRule getRule() { return rule; }

		//"simpleEvolution(" lhs=ID "<-" diff=ID "->" rhS=ID "," typeGraph=ID ")"
		public Group getGroup() { return cGroup; }

		//"simpleEvolution("
		public Keyword getSimpleEvolutionKeyword_0() { return cSimpleEvolutionKeyword_0; }

		//lhs=ID
		public Assignment getLhsAssignment_1() { return cLhsAssignment_1; }

		//ID
		public RuleCall getLhsIDTerminalRuleCall_1_0() { return cLhsIDTerminalRuleCall_1_0; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_2() { return cLessThanSignHyphenMinusKeyword_2; }

		//diff=ID
		public Assignment getDiffAssignment_3() { return cDiffAssignment_3; }

		//ID
		public RuleCall getDiffIDTerminalRuleCall_3_0() { return cDiffIDTerminalRuleCall_3_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }

		//rhS=ID
		public Assignment getRhSAssignment_5() { return cRhSAssignment_5; }

		//ID
		public RuleCall getRhSIDTerminalRuleCall_5_0() { return cRhSIDTerminalRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//typeGraph=ID
		public Assignment getTypeGraphAssignment_7() { return cTypeGraphAssignment_7; }

		//ID
		public RuleCall getTypeGraphIDTerminalRuleCall_7_0() { return cTypeGraphIDTerminalRuleCall_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}

	public class SimpleEvoCospanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleEvoCospan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSimpleEvolutionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLhsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLhsIDTerminalRuleCall_1_0 = (RuleCall)cLhsAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJointAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJointIDTerminalRuleCall_3_0 = (RuleCall)cJointAssignment_3.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRhsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhsIDTerminalRuleCall_5_0 = (RuleCall)cRhsAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeGraphAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTypeGraphIDTerminalRuleCall_7_0 = (RuleCall)cTypeGraphAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//SimpleEvoCospan:
		//	"simpleEvolution(" lhs=ID "->" joint=ID "<-" rhs=ID "," typeGraph=ID ")";
		public ParserRule getRule() { return rule; }

		//"simpleEvolution(" lhs=ID "->" joint=ID "<-" rhs=ID "," typeGraph=ID ")"
		public Group getGroup() { return cGroup; }

		//"simpleEvolution("
		public Keyword getSimpleEvolutionKeyword_0() { return cSimpleEvolutionKeyword_0; }

		//lhs=ID
		public Assignment getLhsAssignment_1() { return cLhsAssignment_1; }

		//ID
		public RuleCall getLhsIDTerminalRuleCall_1_0() { return cLhsIDTerminalRuleCall_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }

		//joint=ID
		public Assignment getJointAssignment_3() { return cJointAssignment_3; }

		//ID
		public RuleCall getJointIDTerminalRuleCall_3_0() { return cJointIDTerminalRuleCall_3_0; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_4() { return cLessThanSignHyphenMinusKeyword_4; }

		//rhs=ID
		public Assignment getRhsAssignment_5() { return cRhsAssignment_5; }

		//ID
		public RuleCall getRhsIDTerminalRuleCall_5_0() { return cRhsIDTerminalRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//typeGraph=ID
		public Assignment getTypeGraphAssignment_7() { return cTypeGraphAssignment_7; }

		//ID
		public RuleCall getTypeGraphIDTerminalRuleCall_7_0() { return cTypeGraphIDTerminalRuleCall_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}

	public class EvoSpanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EvoSpan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEvolutionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLhsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLhsIDTerminalRuleCall_1_0 = (RuleCall)cLhsAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRhsIDTerminalRuleCall_3_0 = (RuleCall)cRhsAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeGraphAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeGraphIDTerminalRuleCall_5_0 = (RuleCall)cTypeGraphAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EvoSpan:
		//	"evolution(" lhs=ID "<->" rhs=ID "," typeGraph=ID ")";
		public ParserRule getRule() { return rule; }

		//"evolution(" lhs=ID "<->" rhs=ID "," typeGraph=ID ")"
		public Group getGroup() { return cGroup; }

		//"evolution("
		public Keyword getEvolutionKeyword_0() { return cEvolutionKeyword_0; }

		//lhs=ID
		public Assignment getLhsAssignment_1() { return cLhsAssignment_1; }

		//ID
		public RuleCall getLhsIDTerminalRuleCall_1_0() { return cLhsIDTerminalRuleCall_1_0; }

		//"<->"
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword_2() { return cLessThanSignHyphenMinusGreaterThanSignKeyword_2; }

		//rhs=ID
		public Assignment getRhsAssignment_3() { return cRhsAssignment_3; }

		//ID
		public RuleCall getRhsIDTerminalRuleCall_3_0() { return cRhsIDTerminalRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//typeGraph=ID
		public Assignment getTypeGraphAssignment_5() { return cTypeGraphAssignment_5; }

		//ID
		public RuleCall getTypeGraphIDTerminalRuleCall_5_0() { return cTypeGraphIDTerminalRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class EvoCospanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EvoCospan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEvolutionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLhsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLhsIDTerminalRuleCall_1_0 = (RuleCall)cLhsAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignLessThanSignHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRhsIDTerminalRuleCall_3_0 = (RuleCall)cRhsAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeGraphAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeGraphIDTerminalRuleCall_5_0 = (RuleCall)cTypeGraphAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EvoCospan:
		//	"evolution(" lhs=ID "-><-" rhs=ID "," typeGraph=ID ")";
		public ParserRule getRule() { return rule; }

		//"evolution(" lhs=ID "-><-" rhs=ID "," typeGraph=ID ")"
		public Group getGroup() { return cGroup; }

		//"evolution("
		public Keyword getEvolutionKeyword_0() { return cEvolutionKeyword_0; }

		//lhs=ID
		public Assignment getLhsAssignment_1() { return cLhsAssignment_1; }

		//ID
		public RuleCall getLhsIDTerminalRuleCall_1_0() { return cLhsIDTerminalRuleCall_1_0; }

		//"-><-"
		public Keyword getHyphenMinusGreaterThanSignLessThanSignHyphenMinusKeyword_2() { return cHyphenMinusGreaterThanSignLessThanSignHyphenMinusKeyword_2; }

		//rhs=ID
		public Assignment getRhsAssignment_3() { return cRhsAssignment_3; }

		//ID
		public RuleCall getRhsIDTerminalRuleCall_3_0() { return cRhsIDTerminalRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//typeGraph=ID
		public Assignment getTypeGraphAssignment_5() { return cTypeGraphAssignment_5; }

		//ID
		public RuleCall getTypeGraphIDTerminalRuleCall_5_0() { return cTypeGraphIDTerminalRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class InstanceSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cISpecKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cModelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModelChoosenSpecficationParserRuleCall_4_0 = (RuleCall)cModelAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMetamodelAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMetamodelChoosenSpecficationParserRuleCall_6_0 = (RuleCall)cMetamodelAssignment_6.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cConstraintSemanticsAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cConstraintSemanticsConstraintSemanticParserRuleCall_9_0_0 = (RuleCall)cConstraintSemanticsAssignment_9_0.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final Keyword cCommaKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Assignment cConstraintSemanticsAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final RuleCall cConstraintSemanticsConstraintSemanticParserRuleCall_9_1_1_0 = (RuleCall)cConstraintSemanticsAssignment_9_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		////Specification instance:
		//InstanceSpecification:
		//	id=ID ":=" "ISpec" "<" model=ChoosenSpecfication "," metamodel=ChoosenSpecfication ">" "{"
		//	(constraintSemantics+=ConstraintSemantic ("," constraintSemantics+=ConstraintSemantic)*) "}";
		public ParserRule getRule() { return rule; }

		//id=ID ":=" "ISpec" "<" model=ChoosenSpecfication "," metamodel=ChoosenSpecfication ">" "{"
		//(constraintSemantics+=ConstraintSemantic ("," constraintSemantics+=ConstraintSemantic)*) "}"
		public Group getGroup() { return cGroup; }

		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//"ISpec"
		public Keyword getISpecKeyword_2() { return cISpecKeyword_2; }

		//"<"
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }

		//model=ChoosenSpecfication
		public Assignment getModelAssignment_4() { return cModelAssignment_4; }

		//ChoosenSpecfication
		public RuleCall getModelChoosenSpecficationParserRuleCall_4_0() { return cModelChoosenSpecficationParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//metamodel=ChoosenSpecfication
		public Assignment getMetamodelAssignment_6() { return cMetamodelAssignment_6; }

		//ChoosenSpecfication
		public RuleCall getMetamodelChoosenSpecficationParserRuleCall_6_0() { return cMetamodelChoosenSpecficationParserRuleCall_6_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_7() { return cGreaterThanSignKeyword_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//constraintSemantics+=ConstraintSemantic ("," constraintSemantics+=ConstraintSemantic)*
		public Group getGroup_9() { return cGroup_9; }

		//constraintSemantics+=ConstraintSemantic
		public Assignment getConstraintSemanticsAssignment_9_0() { return cConstraintSemanticsAssignment_9_0; }

		//ConstraintSemantic
		public RuleCall getConstraintSemanticsConstraintSemanticParserRuleCall_9_0_0() { return cConstraintSemanticsConstraintSemanticParserRuleCall_9_0_0; }

		//("," constraintSemantics+=ConstraintSemantic)*
		public Group getGroup_9_1() { return cGroup_9_1; }

		//","
		public Keyword getCommaKeyword_9_1_0() { return cCommaKeyword_9_1_0; }

		//constraintSemantics+=ConstraintSemantic
		public Assignment getConstraintSemanticsAssignment_9_1_1() { return cConstraintSemanticsAssignment_9_1_1; }

		//ConstraintSemantic
		public RuleCall getConstraintSemanticsConstraintSemanticParserRuleCall_9_1_1_0() { return cConstraintSemanticsConstraintSemanticParserRuleCall_9_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class ChoosenSpecficationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChoosenSpecfication");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//ChoosenSpecfication:
		//	id=ID;
		public ParserRule getRule() { return rule; }

		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}

	public class ConstraintSemanticElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintSemantic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdDpfIdParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArrowsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArrowsArrowsParserRuleCall_2_0_0 = (RuleCall)cArrowsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArrowsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArrowsArrowsParserRuleCall_2_1_1_0 = (RuleCall)cArrowsAssignment_2_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOclAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOclSTRINGTerminalRuleCall_6_0 = (RuleCall)cOclAssignment_6.eContents().get(0);
		
		//ConstraintSemantic:
		//	id=DpfId "{" (arrows+=Arrows ("," arrows+=Arrows)*) "," "}" "=" ocl=STRING;
		public ParserRule getRule() { return rule; }

		//id=DpfId "{" (arrows+=Arrows ("," arrows+=Arrows)*) "," "}" "=" ocl=STRING
		public Group getGroup() { return cGroup; }

		//id=DpfId
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//DpfId
		public RuleCall getIdDpfIdParserRuleCall_0_0() { return cIdDpfIdParserRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//arrows+=Arrows ("," arrows+=Arrows)*
		public Group getGroup_2() { return cGroup_2; }

		//arrows+=Arrows
		public Assignment getArrowsAssignment_2_0() { return cArrowsAssignment_2_0; }

		//Arrows
		public RuleCall getArrowsArrowsParserRuleCall_2_0_0() { return cArrowsArrowsParserRuleCall_2_0_0; }

		//("," arrows+=Arrows)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//arrows+=Arrows
		public Assignment getArrowsAssignment_2_1_1() { return cArrowsAssignment_2_1_1; }

		//Arrows
		public RuleCall getArrowsArrowsParserRuleCall_2_1_1_0() { return cArrowsArrowsParserRuleCall_2_1_1_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }

		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }

		//ocl=STRING
		public Assignment getOclAssignment_6() { return cOclAssignment_6; }

		//STRING
		public RuleCall getOclSTRINGTerminalRuleCall_6_0() { return cOclSTRINGTerminalRuleCall_6_0; }
	}

	public class SpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Specification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSpecKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGraphAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGraphChoosenGraphParserRuleCall_4_0 = (RuleCall)cGraphAssignment_4.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cConstraintsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cConstraintsConstraintParserRuleCall_7_0_0 = (RuleCall)cConstraintsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cConstraintsConstraintParserRuleCall_7_1_1_0 = (RuleCall)cConstraintsAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		////Specification:
		//Specification:
		//	id=ID ":=" "Spec" "<" graph=ChoosenGraph ">" "{" (constraints+=Constraint ("," constraints+=Constraint)*)? "}";
		public ParserRule getRule() { return rule; }

		//id=ID ":=" "Spec" "<" graph=ChoosenGraph ">" "{" (constraints+=Constraint ("," constraints+=Constraint)*)? "}"
		public Group getGroup() { return cGroup; }

		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//"Spec"
		public Keyword getSpecKeyword_2() { return cSpecKeyword_2; }

		//"<"
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }

		//graph=ChoosenGraph
		public Assignment getGraphAssignment_4() { return cGraphAssignment_4; }

		//ChoosenGraph
		public RuleCall getGraphChoosenGraphParserRuleCall_4_0() { return cGraphChoosenGraphParserRuleCall_4_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//(constraints+=Constraint ("," constraints+=Constraint)*)?
		public Group getGroup_7() { return cGroup_7; }

		//constraints+=Constraint
		public Assignment getConstraintsAssignment_7_0() { return cConstraintsAssignment_7_0; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_7_0_0() { return cConstraintsConstraintParserRuleCall_7_0_0; }

		//("," constraints+=Constraint)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//","
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }

		//constraints+=Constraint
		public Assignment getConstraintsAssignment_7_1_1() { return cConstraintsAssignment_7_1_1; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_7_1_1_0() { return cConstraintsConstraintParserRuleCall_7_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ChoosenGraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChoosenGraph");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//ChoosenGraph:
		//	id=ID;
		public ParserRule getRule() { return rule; }

		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignatureConstraintSignatureParserRuleCall_0_0 = (RuleCall)cSignatureAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArrowsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArrowsArrowsParserRuleCall_2_0_0 = (RuleCall)cArrowsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArrowsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArrowsArrowsParserRuleCall_2_1_1_0 = (RuleCall)cArrowsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Constraint:
		//	signature=ConstraintSignature "{" (arrows+=Arrows ("," arrows+=Arrows)*) "}";
		public ParserRule getRule() { return rule; }

		//signature=ConstraintSignature "{" (arrows+=Arrows ("," arrows+=Arrows)*) "}"
		public Group getGroup() { return cGroup; }

		//signature=ConstraintSignature
		public Assignment getSignatureAssignment_0() { return cSignatureAssignment_0; }

		//ConstraintSignature
		public RuleCall getSignatureConstraintSignatureParserRuleCall_0_0() { return cSignatureConstraintSignatureParserRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//arrows+=Arrows ("," arrows+=Arrows)*
		public Group getGroup_2() { return cGroup_2; }

		//arrows+=Arrows
		public Assignment getArrowsAssignment_2_0() { return cArrowsAssignment_2_0; }

		//Arrows
		public RuleCall getArrowsArrowsParserRuleCall_2_0_0() { return cArrowsArrowsParserRuleCall_2_0_0; }

		//("," arrows+=Arrows)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//arrows+=Arrows
		public Assignment getArrowsAssignment_2_1_1() { return cArrowsAssignment_2_1_1; }

		//Arrows
		public RuleCall getArrowsArrowsParserRuleCall_2_1_1_0() { return cArrowsArrowsParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ConstraintSignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintSignature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdDpfIdParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParameterAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParameterIDTerminalRuleCall_2_0_0 = (RuleCall)cParameterAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParameterAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParameterIDTerminalRuleCall_2_1_1_0 = (RuleCall)cParameterAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConstraintSignature:
		//	id=DpfId "(" (parameter+=ID ("," parameter+=ID)*)? ")";
		public ParserRule getRule() { return rule; }

		//id=DpfId "(" (parameter+=ID ("," parameter+=ID)*)? ")"
		public Group getGroup() { return cGroup; }

		//id=DpfId
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//DpfId
		public RuleCall getIdDpfIdParserRuleCall_0_0() { return cIdDpfIdParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(parameter+=ID ("," parameter+=ID)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parameter+=ID
		public Assignment getParameterAssignment_2_0() { return cParameterAssignment_2_0; }

		//ID
		public RuleCall getParameterIDTerminalRuleCall_2_0_0() { return cParameterIDTerminalRuleCall_2_0_0; }

		//("," parameter+=ID)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parameter+=ID
		public Assignment getParameterAssignment_2_1_1() { return cParameterAssignment_2_1_1; }

		//ID
		public RuleCall getParameterIDTerminalRuleCall_2_1_1_0() { return cParameterIDTerminalRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class MorphismElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Morphism");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMorphismKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDomainAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDomainDomainParserRuleCall_4_0 = (RuleCall)cDomainAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCodmainAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCodmainCodomainParserRuleCall_6_0 = (RuleCall)cCodmainAssignment_6.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cMappingsAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cMappingsMappingParserRuleCall_9_0_0 = (RuleCall)cMappingsAssignment_9_0.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final Keyword cCommaKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Assignment cMappingsAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final RuleCall cMappingsMappingParserRuleCall_9_1_1_0 = (RuleCall)cMappingsAssignment_9_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		////Graph morphism:
		//Morphism:
		//	ID ":=" "Morphism" "<" domain=Domain "," codmain=Codomain ">" "{" (mappings+=Mapping ("," mappings+=Mapping)*)? "}";
		public ParserRule getRule() { return rule; }

		//ID ":=" "Morphism" "<" domain=Domain "," codmain=Codomain ">" "{" (mappings+=Mapping ("," mappings+=Mapping)*)? "}"
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//"Morphism"
		public Keyword getMorphismKeyword_2() { return cMorphismKeyword_2; }

		//"<"
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }

		//domain=Domain
		public Assignment getDomainAssignment_4() { return cDomainAssignment_4; }

		//Domain
		public RuleCall getDomainDomainParserRuleCall_4_0() { return cDomainDomainParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//codmain=Codomain
		public Assignment getCodmainAssignment_6() { return cCodmainAssignment_6; }

		//Codomain
		public RuleCall getCodmainCodomainParserRuleCall_6_0() { return cCodmainCodomainParserRuleCall_6_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_7() { return cGreaterThanSignKeyword_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//(mappings+=Mapping ("," mappings+=Mapping)*)?
		public Group getGroup_9() { return cGroup_9; }

		//mappings+=Mapping
		public Assignment getMappingsAssignment_9_0() { return cMappingsAssignment_9_0; }

		//Mapping
		public RuleCall getMappingsMappingParserRuleCall_9_0_0() { return cMappingsMappingParserRuleCall_9_0_0; }

		//("," mappings+=Mapping)*
		public Group getGroup_9_1() { return cGroup_9_1; }

		//","
		public Keyword getCommaKeyword_9_1_0() { return cCommaKeyword_9_1_0; }

		//mappings+=Mapping
		public Assignment getMappingsAssignment_9_1_1() { return cMappingsAssignment_9_1_1; }

		//Mapping
		public RuleCall getMappingsMappingParserRuleCall_9_1_1_0() { return cMappingsMappingParserRuleCall_9_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class DomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Domain");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//Domain:
		//	id=ID;
		public ParserRule getRule() { return rule; }

		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}

	public class CodomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Codomain");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//Codomain:
		//	id=ID;
		public ParserRule getRule() { return rule; }

		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}

	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mapping");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMappingNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMappingArrowParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Mapping:
		//	MappingNode | MappingArrow;
		public ParserRule getRule() { return rule; }

		//MappingNode | MappingArrow
		public Alternatives getAlternatives() { return cAlternatives; }

		//MappingNode
		public RuleCall getMappingNodeParserRuleCall_0() { return cMappingNodeParserRuleCall_0; }

		//MappingArrow
		public RuleCall getMappingArrowParserRuleCall_1() { return cMappingArrowParserRuleCall_1; }
	}

	public class MappingNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDomainAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDomainNodeParserRuleCall_0_0 = (RuleCall)cDomainAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCodomainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodomainNodeParserRuleCall_2_0 = (RuleCall)cCodomainAssignment_2.eContents().get(0);
		
		//MappingNode:
		//	domain=Node "=>" codomain=Node;
		public ParserRule getRule() { return rule; }

		//domain=Node "=>" codomain=Node
		public Group getGroup() { return cGroup; }

		//domain=Node
		public Assignment getDomainAssignment_0() { return cDomainAssignment_0; }

		//Node
		public RuleCall getDomainNodeParserRuleCall_0_0() { return cDomainNodeParserRuleCall_0_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//codomain=Node
		public Assignment getCodomainAssignment_2() { return cCodomainAssignment_2; }

		//Node
		public RuleCall getCodomainNodeParserRuleCall_2_0() { return cCodomainNodeParserRuleCall_2_0; }
	}

	public class MappingArrowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingArrow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDomainAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDomainArrowParserRuleCall_0_0 = (RuleCall)cDomainAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCodmainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodmainArrowParserRuleCall_2_0 = (RuleCall)cCodmainAssignment_2.eContents().get(0);
		
		//MappingArrow:
		//	domain=Arrow "=>" codmain=Arrow;
		public ParserRule getRule() { return rule; }

		//domain=Arrow "=>" codmain=Arrow
		public Group getGroup() { return cGroup; }

		//domain=Arrow
		public Assignment getDomainAssignment_0() { return cDomainAssignment_0; }

		//Arrow
		public RuleCall getDomainArrowParserRuleCall_0_0() { return cDomainArrowParserRuleCall_0_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//codmain=Arrow
		public Assignment getCodmainAssignment_2() { return cCodmainAssignment_2; }

		//Arrow
		public RuleCall getCodmainArrowParserRuleCall_2_0() { return cCodmainArrowParserRuleCall_2_0; }
	}

	public class ExtSubTGraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtSubTGraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExtSubTGraphKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExtendsGraphAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExtendsGraphTGraphExtSubNameParserRuleCall_4_0 = (RuleCall)cExtendsGraphAssignment_4.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cElementsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElementsElementParserRuleCall_7_0 = (RuleCall)cElementsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		////Typed subgraphs:
		//ExtSubTGraph:
		//	id=ID ":=" "ExtSubTGraph" "<" extendsGraph=TGraphExtSubName ">" "{" elements+=Element* "}";
		public ParserRule getRule() { return rule; }

		//id=ID ":=" "ExtSubTGraph" "<" extendsGraph=TGraphExtSubName ">" "{" elements+=Element* "}"
		public Group getGroup() { return cGroup; }

		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//"ExtSubTGraph"
		public Keyword getExtSubTGraphKeyword_2() { return cExtSubTGraphKeyword_2; }

		//"<"
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }

		//extendsGraph=TGraphExtSubName
		public Assignment getExtendsGraphAssignment_4() { return cExtendsGraphAssignment_4; }

		//TGraphExtSubName
		public RuleCall getExtendsGraphTGraphExtSubNameParserRuleCall_4_0() { return cExtendsGraphTGraphExtSubNameParserRuleCall_4_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//elements+=Element*
		public Assignment getElementsAssignment_7() { return cElementsAssignment_7; }

		//Element
		public RuleCall getElementsElementParserRuleCall_7_0() { return cElementsElementParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class TGraphExtSubNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TGraphExtSubName");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//TGraphExtSubName:
		//	id=ID;
		public ParserRule getRule() { return rule; }

		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}

	public class TGraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TGraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTGraphKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeGraphAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeGraphTGraphNameParserRuleCall_4_0 = (RuleCall)cTypeGraphAssignment_4.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cElementsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElementsElementParserRuleCall_7_0 = (RuleCall)cElementsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		////Typed graphs:
		//TGraph:
		//	id=ID ":=" "TGraph" "<" typeGraph=TGraphName ">" "{" elements+=Element* "}";
		public ParserRule getRule() { return rule; }

		//id=ID ":=" "TGraph" "<" typeGraph=TGraphName ">" "{" elements+=Element* "}"
		public Group getGroup() { return cGroup; }

		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//"TGraph"
		public Keyword getTGraphKeyword_2() { return cTGraphKeyword_2; }

		//"<"
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }

		//typeGraph=TGraphName
		public Assignment getTypeGraphAssignment_4() { return cTypeGraphAssignment_4; }

		//TGraphName
		public RuleCall getTypeGraphTGraphNameParserRuleCall_4_0() { return cTypeGraphTGraphNameParserRuleCall_4_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//elements+=Element*
		public Assignment getElementsAssignment_7() { return cElementsAssignment_7; }

		//Element
		public RuleCall getElementsElementParserRuleCall_7_0() { return cElementsElementParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class TGraphNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TGraphName");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//TGraphName:
		//	id=ID;
		public ParserRule getRule() { return rule; }

		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cNodeParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cArrowsParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Element:
		//	Node "," | Arrows ",";
		public ParserRule getRule() { return rule; }

		//Node "," | Arrows ","
		public Alternatives getAlternatives() { return cAlternatives; }

		//Node ","
		public Group getGroup_0() { return cGroup_0; }

		//Node
		public RuleCall getNodeParserRuleCall_0_0() { return cNodeParserRuleCall_0_0; }

		//","
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }

		//Arrows ","
		public Group getGroup_1() { return cGroup_1; }

		//Arrows
		public RuleCall getArrowsParserRuleCall_1_0() { return cArrowsParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
	}

	public class ArrowsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arrows");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cSrAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSrNodeParserRuleCall_0_0_0 = (RuleCall)cSrAssignment_0_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cIdAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cIdDpfIdParserRuleCall_0_2_0 = (RuleCall)cIdAssignment_0_2.eContents().get(0);
		private final Keyword cColonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cTypeAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cTypeDpfIdParserRuleCall_0_4_0 = (RuleCall)cTypeAssignment_0_4.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cNextAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cNextArrowsParserRuleCall_0_6_0 = (RuleCall)cNextAssignment_0_6.eContents().get(0);
		private final RuleCall cArrowParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Arrows:
		//	sr=Node "-" id=DpfId ":" type=DpfId "->" next=Arrows | Arrow;
		public ParserRule getRule() { return rule; }

		//sr=Node "-" id=DpfId ":" type=DpfId "->" next=Arrows | Arrow
		public Alternatives getAlternatives() { return cAlternatives; }

		//sr=Node "-" id=DpfId ":" type=DpfId "->" next=Arrows
		public Group getGroup_0() { return cGroup_0; }

		//sr=Node
		public Assignment getSrAssignment_0_0() { return cSrAssignment_0_0; }

		//Node
		public RuleCall getSrNodeParserRuleCall_0_0_0() { return cSrNodeParserRuleCall_0_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//id=DpfId
		public Assignment getIdAssignment_0_2() { return cIdAssignment_0_2; }

		//DpfId
		public RuleCall getIdDpfIdParserRuleCall_0_2_0() { return cIdDpfIdParserRuleCall_0_2_0; }

		//":"
		public Keyword getColonKeyword_0_3() { return cColonKeyword_0_3; }

		//type=DpfId
		public Assignment getTypeAssignment_0_4() { return cTypeAssignment_0_4; }

		//DpfId
		public RuleCall getTypeDpfIdParserRuleCall_0_4_0() { return cTypeDpfIdParserRuleCall_0_4_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_5() { return cHyphenMinusGreaterThanSignKeyword_0_5; }

		//next=Arrows
		public Assignment getNextAssignment_0_6() { return cNextAssignment_0_6; }

		//Arrows
		public RuleCall getNextArrowsParserRuleCall_0_6_0() { return cNextArrowsParserRuleCall_0_6_0; }

		//Arrow
		public RuleCall getArrowParserRuleCall_1() { return cArrowParserRuleCall_1; }
	}

	public class ArrowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arrow");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cSrAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSrNodeParserRuleCall_0_0_0 = (RuleCall)cSrAssignment_0_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cIdAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cIdDpfIdParserRuleCall_0_2_0 = (RuleCall)cIdAssignment_0_2.eContents().get(0);
		private final Keyword cColonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cAsteriskKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cTgDataTypeAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cTgDataTypeDataTypeEnumRuleCall_0_6_0 = (RuleCall)cTgDataTypeAssignment_0_6.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSrAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSrNodeParserRuleCall_1_0_0 = (RuleCall)cSrAssignment_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIdAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIdDpfIdParserRuleCall_1_2_0 = (RuleCall)cIdAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cTypeAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cTypeDpfIdParserRuleCall_1_4_0 = (RuleCall)cTypeAssignment_1_4.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cTgValueAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cTgValueAttributeValueParserRuleCall_1_6_0 = (RuleCall)cTgValueAssignment_1_6.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cSrAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSrNodeParserRuleCall_2_0_0 = (RuleCall)cSrAssignment_2_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cIdAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cIdDpfIdParserRuleCall_2_2_0 = (RuleCall)cIdAssignment_2_2.eContents().get(0);
		private final Keyword cColonKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cTypeAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cTypeDpfIdParserRuleCall_2_4_0 = (RuleCall)cTypeAssignment_2_4.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Assignment cTgNodeAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cTgNodeNodeParserRuleCall_2_6_0 = (RuleCall)cTgNodeAssignment_2_6.eContents().get(0);
		
		//Arrow:
		//	sr=Node "-" id=DpfId ":" "*" "->" tgDataType=DataType | sr=Node "-" id=DpfId ":" type=DpfId "->"
		//	tgValue=AttributeValue | sr=Node "-" id=DpfId ":" type=DpfId "->" tgNode=Node;
		public ParserRule getRule() { return rule; }

		//sr=Node "-" id=DpfId ":" "*" "->" tgDataType=DataType | sr=Node "-" id=DpfId ":" type=DpfId "->" tgValue=AttributeValue
		//| sr=Node "-" id=DpfId ":" type=DpfId "->" tgNode=Node
		public Alternatives getAlternatives() { return cAlternatives; }

		//sr=Node "-" id=DpfId ":" "*" "->" tgDataType=DataType
		public Group getGroup_0() { return cGroup_0; }

		//sr=Node
		public Assignment getSrAssignment_0_0() { return cSrAssignment_0_0; }

		//Node
		public RuleCall getSrNodeParserRuleCall_0_0_0() { return cSrNodeParserRuleCall_0_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//id=DpfId
		public Assignment getIdAssignment_0_2() { return cIdAssignment_0_2; }

		//DpfId
		public RuleCall getIdDpfIdParserRuleCall_0_2_0() { return cIdDpfIdParserRuleCall_0_2_0; }

		//":"
		public Keyword getColonKeyword_0_3() { return cColonKeyword_0_3; }

		//"*"
		public Keyword getAsteriskKeyword_0_4() { return cAsteriskKeyword_0_4; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_5() { return cHyphenMinusGreaterThanSignKeyword_0_5; }

		//tgDataType=DataType
		public Assignment getTgDataTypeAssignment_0_6() { return cTgDataTypeAssignment_0_6; }

		//DataType
		public RuleCall getTgDataTypeDataTypeEnumRuleCall_0_6_0() { return cTgDataTypeDataTypeEnumRuleCall_0_6_0; }

		//sr=Node "-" id=DpfId ":" type=DpfId "->" tgValue=AttributeValue
		public Group getGroup_1() { return cGroup_1; }

		//sr=Node
		public Assignment getSrAssignment_1_0() { return cSrAssignment_1_0; }

		//Node
		public RuleCall getSrNodeParserRuleCall_1_0_0() { return cSrNodeParserRuleCall_1_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }

		//id=DpfId
		public Assignment getIdAssignment_1_2() { return cIdAssignment_1_2; }

		//DpfId
		public RuleCall getIdDpfIdParserRuleCall_1_2_0() { return cIdDpfIdParserRuleCall_1_2_0; }

		//":"
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//type=DpfId
		public Assignment getTypeAssignment_1_4() { return cTypeAssignment_1_4; }

		//DpfId
		public RuleCall getTypeDpfIdParserRuleCall_1_4_0() { return cTypeDpfIdParserRuleCall_1_4_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_5() { return cHyphenMinusGreaterThanSignKeyword_1_5; }

		//tgValue=AttributeValue
		public Assignment getTgValueAssignment_1_6() { return cTgValueAssignment_1_6; }

		//AttributeValue
		public RuleCall getTgValueAttributeValueParserRuleCall_1_6_0() { return cTgValueAttributeValueParserRuleCall_1_6_0; }

		//sr=Node "-" id=DpfId ":" type=DpfId "->" tgNode=Node
		public Group getGroup_2() { return cGroup_2; }

		//sr=Node
		public Assignment getSrAssignment_2_0() { return cSrAssignment_2_0; }

		//Node
		public RuleCall getSrNodeParserRuleCall_2_0_0() { return cSrNodeParserRuleCall_2_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_2_1() { return cHyphenMinusKeyword_2_1; }

		//id=DpfId
		public Assignment getIdAssignment_2_2() { return cIdAssignment_2_2; }

		//DpfId
		public RuleCall getIdDpfIdParserRuleCall_2_2_0() { return cIdDpfIdParserRuleCall_2_2_0; }

		//":"
		public Keyword getColonKeyword_2_3() { return cColonKeyword_2_3; }

		//type=DpfId
		public Assignment getTypeAssignment_2_4() { return cTypeAssignment_2_4; }

		//DpfId
		public RuleCall getTypeDpfIdParserRuleCall_2_4_0() { return cTypeDpfIdParserRuleCall_2_4_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_5() { return cHyphenMinusGreaterThanSignKeyword_2_5; }

		//tgNode=Node
		public Assignment getTgNodeAssignment_2_6() { return cTgNodeAssignment_2_6; }

		//Node
		public RuleCall getTgNodeNodeParserRuleCall_2_6_0() { return cTgNodeNodeParserRuleCall_2_6_0; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdDpfIdParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDpfIdParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Node:
		//	id=DpfId ":" type=DpfId;
		public ParserRule getRule() { return rule; }

		//id=DpfId ":" type=DpfId
		public Group getGroup() { return cGroup; }

		//id=DpfId
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//DpfId
		public RuleCall getIdDpfIdParserRuleCall_0_0() { return cIdDpfIdParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=DpfId
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//DpfId
		public RuleCall getTypeDpfIdParserRuleCall_2_0() { return cTypeDpfIdParserRuleCall_2_0; }
	}

	public class AttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueVALUEParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AttributeValue:
		//	"[" value=VALUE "]";
		public ParserRule getRule() { return rule; }

		//"[" value=VALUE "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//value=VALUE
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//VALUE
		public RuleCall getValueVALUEParserRuleCall_1_0() { return cValueVALUEParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class DpfIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DpfId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdINTTerminalRuleCall_1_1_0 = (RuleCall)cIdAssignment_1_1.eContents().get(0);
		
		//DpfId:
		//	name=ID ("@" id=INT)?;
		public ParserRule getRule() { return rule; }

		//name=ID ("@" id=INT)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("@" id=INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"@"
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }

		//id=INT
		public Assignment getIdAssignment_1_1() { return cIdAssignment_1_1; }

		//INT
		public RuleCall getIdINTTerminalRuleCall_1_1_0() { return cIdINTTerminalRuleCall_1_1_0; }
	}
	
	
	public class DataTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTBOOLEANEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTBOOLEANBooleanKeyword_0_0 = (Keyword)cTBOOLEANEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTCHAREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTCHARCharKeyword_1_0 = (Keyword)cTCHAREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTBYTEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTBYTEByteKeyword_2_0 = (Keyword)cTBYTEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTSHORTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTSHORTShortKeyword_3_0 = (Keyword)cTSHORTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cTINTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cTINTIntKeyword_4_0 = (Keyword)cTINTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cTLONGEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cTLONGLongKeyword_5_0 = (Keyword)cTLONGEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cTFLOATEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cTFLOATFloatKeyword_6_0 = (Keyword)cTFLOATEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cTDOUBLEEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cTDOUBLEDoubleKeyword_7_0 = (Keyword)cTDOUBLEEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cTSTRINGEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cTSTRINGStringKeyword_8_0 = (Keyword)cTSTRINGEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum DataType:
		//	TBOOLEAN="Boolean" | TCHAR="Char" | TBYTE="Byte" | TSHORT="Short" | TINT="Int" | TLONG="Long" | TFLOAT="Float" |
		//	TDOUBLE="Double" | TSTRING="String";
		public EnumRule getRule() { return rule; }

		//TBOOLEAN="Boolean" | TCHAR="Char" | TBYTE="Byte" | TSHORT="Short" | TINT="Int" | TLONG="Long" | TFLOAT="Float" |
		//TDOUBLE="Double" | TSTRING="String"
		public Alternatives getAlternatives() { return cAlternatives; }

		//TBOOLEAN="Boolean"
		public EnumLiteralDeclaration getTBOOLEANEnumLiteralDeclaration_0() { return cTBOOLEANEnumLiteralDeclaration_0; }

		//"Boolean"
		public Keyword getTBOOLEANBooleanKeyword_0_0() { return cTBOOLEANBooleanKeyword_0_0; }

		//TCHAR="Char"
		public EnumLiteralDeclaration getTCHAREnumLiteralDeclaration_1() { return cTCHAREnumLiteralDeclaration_1; }

		//"Char"
		public Keyword getTCHARCharKeyword_1_0() { return cTCHARCharKeyword_1_0; }

		//TBYTE="Byte"
		public EnumLiteralDeclaration getTBYTEEnumLiteralDeclaration_2() { return cTBYTEEnumLiteralDeclaration_2; }

		//"Byte"
		public Keyword getTBYTEByteKeyword_2_0() { return cTBYTEByteKeyword_2_0; }

		//TSHORT="Short"
		public EnumLiteralDeclaration getTSHORTEnumLiteralDeclaration_3() { return cTSHORTEnumLiteralDeclaration_3; }

		//"Short"
		public Keyword getTSHORTShortKeyword_3_0() { return cTSHORTShortKeyword_3_0; }

		//TINT="Int"
		public EnumLiteralDeclaration getTINTEnumLiteralDeclaration_4() { return cTINTEnumLiteralDeclaration_4; }

		//"Int"
		public Keyword getTINTIntKeyword_4_0() { return cTINTIntKeyword_4_0; }

		//TLONG="Long"
		public EnumLiteralDeclaration getTLONGEnumLiteralDeclaration_5() { return cTLONGEnumLiteralDeclaration_5; }

		//"Long"
		public Keyword getTLONGLongKeyword_5_0() { return cTLONGLongKeyword_5_0; }

		//TFLOAT="Float"
		public EnumLiteralDeclaration getTFLOATEnumLiteralDeclaration_6() { return cTFLOATEnumLiteralDeclaration_6; }

		//"Float"
		public Keyword getTFLOATFloatKeyword_6_0() { return cTFLOATFloatKeyword_6_0; }

		//TDOUBLE="Double"
		public EnumLiteralDeclaration getTDOUBLEEnumLiteralDeclaration_7() { return cTDOUBLEEnumLiteralDeclaration_7; }

		//"Double"
		public Keyword getTDOUBLEDoubleKeyword_7_0() { return cTDOUBLEDoubleKeyword_7_0; }

		//TSTRING="String"
		public EnumLiteralDeclaration getTSTRINGEnumLiteralDeclaration_8() { return cTSTRINGEnumLiteralDeclaration_8; }

		//"String"
		public Keyword getTSTRINGStringKeyword_8_0() { return cTSTRINGStringKeyword_8_0; }
	}
	
	private ModelElements pModel;
	private DataTypeElements unknownRuleDataType;
	private TerminalRule tCHAR;
	private TerminalRule tNUMBER;
	private VALUEElements pVALUE;
	private DefinitionElements pDefinition;
	private MakeEmfElements pMakeEmf;
	private MakeEcoreElements pMakeEcore;
	private MakeImageElements pMakeImage;
	private SimpleEvoSpanElements pSimpleEvoSpan;
	private SimpleEvoCospanElements pSimpleEvoCospan;
	private EvoSpanElements pEvoSpan;
	private EvoCospanElements pEvoCospan;
	private InstanceSpecificationElements pInstanceSpecification;
	private ChoosenSpecficationElements pChoosenSpecfication;
	private ConstraintSemanticElements pConstraintSemantic;
	private SpecificationElements pSpecification;
	private ChoosenGraphElements pChoosenGraph;
	private ConstraintElements pConstraint;
	private ConstraintSignatureElements pConstraintSignature;
	private MorphismElements pMorphism;
	private DomainElements pDomain;
	private CodomainElements pCodomain;
	private MappingElements pMapping;
	private MappingNodeElements pMappingNode;
	private MappingArrowElements pMappingArrow;
	private ExtSubTGraphElements pExtSubTGraph;
	private TGraphExtSubNameElements pTGraphExtSubName;
	private TGraphElements pTGraph;
	private TGraphNameElements pTGraphName;
	private ElementElements pElement;
	private ArrowsElements pArrows;
	private ArrowElements pArrow;
	private NodeElements pNode;
	private AttributeValueElements pAttributeValue;
	private DpfIdElements pDpfId;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DPFTextGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Program:
	//Model:
	//	(definitions+=Definition definitions+=Definition*)?;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//enum DataType:
	//	TBOOLEAN="Boolean" | TCHAR="Char" | TBYTE="Byte" | TSHORT="Short" | TINT="Int" | TLONG="Long" | TFLOAT="Float" |
	//	TDOUBLE="Double" | TSTRING="String";
	public DataTypeElements getDataTypeAccess() {
		return (unknownRuleDataType != null) ? unknownRuleDataType : (unknownRuleDataType = new DataTypeElements());
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	////Java Datatypes:
	//terminal CHAR:
	//	"\'" ANY_OTHER "\'";
	public TerminalRule getCHARRule() {
		return (tCHAR != null) ? tCHAR : (tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHAR"));
	} 

	//terminal NUMBER:
	//	INT ("." INT);
	public TerminalRule getNUMBERRule() {
		return (tNUMBER != null) ? tNUMBER : (tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER"));
	} 

	//VALUE:
	//	NUMBER | CHAR | STRING;
	public VALUEElements getVALUEAccess() {
		return (pVALUE != null) ? pVALUE : (pVALUE = new VALUEElements());
	}
	
	public ParserRule getVALUERule() {
		return getVALUEAccess().getRule();
	}

	////
	////Grammar Rules:
	////
	////"Program-Parts":	
	//Definition:
	//	InstanceSpecification | Specification | TGraph | ExtSubTGraph | MakeEmf | MakeEcore | MakeImage | SimpleEvoSpan |
	//	SimpleEvoCospan | Morphism | EvoSpan | EvoCospan;
	public DefinitionElements getDefinitionAccess() {
		return (pDefinition != null) ? pDefinition : (pDefinition = new DefinitionElements());
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//MakeEmf:
	//	"emf(" id=ID ")";
	public MakeEmfElements getMakeEmfAccess() {
		return (pMakeEmf != null) ? pMakeEmf : (pMakeEmf = new MakeEmfElements());
	}
	
	public ParserRule getMakeEmfRule() {
		return getMakeEmfAccess().getRule();
	}

	//MakeEcore:
	//	"ecore(" id=ID ")";
	public MakeEcoreElements getMakeEcoreAccess() {
		return (pMakeEcore != null) ? pMakeEcore : (pMakeEcore = new MakeEcoreElements());
	}
	
	public ParserRule getMakeEcoreRule() {
		return getMakeEcoreAccess().getRule();
	}

	//MakeImage:
	//	"image(" id=ID ")";
	public MakeImageElements getMakeImageAccess() {
		return (pMakeImage != null) ? pMakeImage : (pMakeImage = new MakeImageElements());
	}
	
	public ParserRule getMakeImageRule() {
		return getMakeImageAccess().getRule();
	}

	//SimpleEvoSpan:
	//	"simpleEvolution(" lhs=ID "<-" diff=ID "->" rhS=ID "," typeGraph=ID ")";
	public SimpleEvoSpanElements getSimpleEvoSpanAccess() {
		return (pSimpleEvoSpan != null) ? pSimpleEvoSpan : (pSimpleEvoSpan = new SimpleEvoSpanElements());
	}
	
	public ParserRule getSimpleEvoSpanRule() {
		return getSimpleEvoSpanAccess().getRule();
	}

	//SimpleEvoCospan:
	//	"simpleEvolution(" lhs=ID "->" joint=ID "<-" rhs=ID "," typeGraph=ID ")";
	public SimpleEvoCospanElements getSimpleEvoCospanAccess() {
		return (pSimpleEvoCospan != null) ? pSimpleEvoCospan : (pSimpleEvoCospan = new SimpleEvoCospanElements());
	}
	
	public ParserRule getSimpleEvoCospanRule() {
		return getSimpleEvoCospanAccess().getRule();
	}

	//EvoSpan:
	//	"evolution(" lhs=ID "<->" rhs=ID "," typeGraph=ID ")";
	public EvoSpanElements getEvoSpanAccess() {
		return (pEvoSpan != null) ? pEvoSpan : (pEvoSpan = new EvoSpanElements());
	}
	
	public ParserRule getEvoSpanRule() {
		return getEvoSpanAccess().getRule();
	}

	//EvoCospan:
	//	"evolution(" lhs=ID "-><-" rhs=ID "," typeGraph=ID ")";
	public EvoCospanElements getEvoCospanAccess() {
		return (pEvoCospan != null) ? pEvoCospan : (pEvoCospan = new EvoCospanElements());
	}
	
	public ParserRule getEvoCospanRule() {
		return getEvoCospanAccess().getRule();
	}

	////Specification instance:
	//InstanceSpecification:
	//	id=ID ":=" "ISpec" "<" model=ChoosenSpecfication "," metamodel=ChoosenSpecfication ">" "{"
	//	(constraintSemantics+=ConstraintSemantic ("," constraintSemantics+=ConstraintSemantic)*) "}";
	public InstanceSpecificationElements getInstanceSpecificationAccess() {
		return (pInstanceSpecification != null) ? pInstanceSpecification : (pInstanceSpecification = new InstanceSpecificationElements());
	}
	
	public ParserRule getInstanceSpecificationRule() {
		return getInstanceSpecificationAccess().getRule();
	}

	//ChoosenSpecfication:
	//	id=ID;
	public ChoosenSpecficationElements getChoosenSpecficationAccess() {
		return (pChoosenSpecfication != null) ? pChoosenSpecfication : (pChoosenSpecfication = new ChoosenSpecficationElements());
	}
	
	public ParserRule getChoosenSpecficationRule() {
		return getChoosenSpecficationAccess().getRule();
	}

	//ConstraintSemantic:
	//	id=DpfId "{" (arrows+=Arrows ("," arrows+=Arrows)*) "," "}" "=" ocl=STRING;
	public ConstraintSemanticElements getConstraintSemanticAccess() {
		return (pConstraintSemantic != null) ? pConstraintSemantic : (pConstraintSemantic = new ConstraintSemanticElements());
	}
	
	public ParserRule getConstraintSemanticRule() {
		return getConstraintSemanticAccess().getRule();
	}

	////Specification:
	//Specification:
	//	id=ID ":=" "Spec" "<" graph=ChoosenGraph ">" "{" (constraints+=Constraint ("," constraints+=Constraint)*)? "}";
	public SpecificationElements getSpecificationAccess() {
		return (pSpecification != null) ? pSpecification : (pSpecification = new SpecificationElements());
	}
	
	public ParserRule getSpecificationRule() {
		return getSpecificationAccess().getRule();
	}

	//ChoosenGraph:
	//	id=ID;
	public ChoosenGraphElements getChoosenGraphAccess() {
		return (pChoosenGraph != null) ? pChoosenGraph : (pChoosenGraph = new ChoosenGraphElements());
	}
	
	public ParserRule getChoosenGraphRule() {
		return getChoosenGraphAccess().getRule();
	}

	//Constraint:
	//	signature=ConstraintSignature "{" (arrows+=Arrows ("," arrows+=Arrows)*) "}";
	public ConstraintElements getConstraintAccess() {
		return (pConstraint != null) ? pConstraint : (pConstraint = new ConstraintElements());
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//ConstraintSignature:
	//	id=DpfId "(" (parameter+=ID ("," parameter+=ID)*)? ")";
	public ConstraintSignatureElements getConstraintSignatureAccess() {
		return (pConstraintSignature != null) ? pConstraintSignature : (pConstraintSignature = new ConstraintSignatureElements());
	}
	
	public ParserRule getConstraintSignatureRule() {
		return getConstraintSignatureAccess().getRule();
	}

	////Graph morphism:
	//Morphism:
	//	ID ":=" "Morphism" "<" domain=Domain "," codmain=Codomain ">" "{" (mappings+=Mapping ("," mappings+=Mapping)*)? "}";
	public MorphismElements getMorphismAccess() {
		return (pMorphism != null) ? pMorphism : (pMorphism = new MorphismElements());
	}
	
	public ParserRule getMorphismRule() {
		return getMorphismAccess().getRule();
	}

	//Domain:
	//	id=ID;
	public DomainElements getDomainAccess() {
		return (pDomain != null) ? pDomain : (pDomain = new DomainElements());
	}
	
	public ParserRule getDomainRule() {
		return getDomainAccess().getRule();
	}

	//Codomain:
	//	id=ID;
	public CodomainElements getCodomainAccess() {
		return (pCodomain != null) ? pCodomain : (pCodomain = new CodomainElements());
	}
	
	public ParserRule getCodomainRule() {
		return getCodomainAccess().getRule();
	}

	//Mapping:
	//	MappingNode | MappingArrow;
	public MappingElements getMappingAccess() {
		return (pMapping != null) ? pMapping : (pMapping = new MappingElements());
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}

	//MappingNode:
	//	domain=Node "=>" codomain=Node;
	public MappingNodeElements getMappingNodeAccess() {
		return (pMappingNode != null) ? pMappingNode : (pMappingNode = new MappingNodeElements());
	}
	
	public ParserRule getMappingNodeRule() {
		return getMappingNodeAccess().getRule();
	}

	//MappingArrow:
	//	domain=Arrow "=>" codmain=Arrow;
	public MappingArrowElements getMappingArrowAccess() {
		return (pMappingArrow != null) ? pMappingArrow : (pMappingArrow = new MappingArrowElements());
	}
	
	public ParserRule getMappingArrowRule() {
		return getMappingArrowAccess().getRule();
	}

	////Typed subgraphs:
	//ExtSubTGraph:
	//	id=ID ":=" "ExtSubTGraph" "<" extendsGraph=TGraphExtSubName ">" "{" elements+=Element* "}";
	public ExtSubTGraphElements getExtSubTGraphAccess() {
		return (pExtSubTGraph != null) ? pExtSubTGraph : (pExtSubTGraph = new ExtSubTGraphElements());
	}
	
	public ParserRule getExtSubTGraphRule() {
		return getExtSubTGraphAccess().getRule();
	}

	//TGraphExtSubName:
	//	id=ID;
	public TGraphExtSubNameElements getTGraphExtSubNameAccess() {
		return (pTGraphExtSubName != null) ? pTGraphExtSubName : (pTGraphExtSubName = new TGraphExtSubNameElements());
	}
	
	public ParserRule getTGraphExtSubNameRule() {
		return getTGraphExtSubNameAccess().getRule();
	}

	////Typed graphs:
	//TGraph:
	//	id=ID ":=" "TGraph" "<" typeGraph=TGraphName ">" "{" elements+=Element* "}";
	public TGraphElements getTGraphAccess() {
		return (pTGraph != null) ? pTGraph : (pTGraph = new TGraphElements());
	}
	
	public ParserRule getTGraphRule() {
		return getTGraphAccess().getRule();
	}

	//TGraphName:
	//	id=ID;
	public TGraphNameElements getTGraphNameAccess() {
		return (pTGraphName != null) ? pTGraphName : (pTGraphName = new TGraphNameElements());
	}
	
	public ParserRule getTGraphNameRule() {
		return getTGraphNameAccess().getRule();
	}

	//Element:
	//	Node "," | Arrows ",";
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//Arrows:
	//	sr=Node "-" id=DpfId ":" type=DpfId "->" next=Arrows | Arrow;
	public ArrowsElements getArrowsAccess() {
		return (pArrows != null) ? pArrows : (pArrows = new ArrowsElements());
	}
	
	public ParserRule getArrowsRule() {
		return getArrowsAccess().getRule();
	}

	//Arrow:
	//	sr=Node "-" id=DpfId ":" "*" "->" tgDataType=DataType | sr=Node "-" id=DpfId ":" type=DpfId "->"
	//	tgValue=AttributeValue | sr=Node "-" id=DpfId ":" type=DpfId "->" tgNode=Node;
	public ArrowElements getArrowAccess() {
		return (pArrow != null) ? pArrow : (pArrow = new ArrowElements());
	}
	
	public ParserRule getArrowRule() {
		return getArrowAccess().getRule();
	}

	//Node:
	//	id=DpfId ":" type=DpfId;
	public NodeElements getNodeAccess() {
		return (pNode != null) ? pNode : (pNode = new NodeElements());
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//AttributeValue:
	//	"[" value=VALUE "]";
	public AttributeValueElements getAttributeValueAccess() {
		return (pAttributeValue != null) ? pAttributeValue : (pAttributeValue = new AttributeValueElements());
	}
	
	public ParserRule getAttributeValueRule() {
		return getAttributeValueAccess().getRule();
	}

	//DpfId:
	//	name=ID ("@" id=INT)?;
	public DpfIdElements getDpfIdAccess() {
		return (pDpfId != null) ? pDpfId : (pDpfId = new DpfIdElements());
	}
	
	public ParserRule getDpfIdRule() {
		return getDpfIdAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
