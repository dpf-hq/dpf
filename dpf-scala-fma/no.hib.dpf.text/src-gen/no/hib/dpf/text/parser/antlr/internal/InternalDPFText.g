/*
* generated by Xtext
*/
grammar InternalDPFText;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package no.hib.dpf.text.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package no.hib.dpf.text.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import no.hib.dpf.text.services.DPFTextGrammarAccess;

}

@parser::members {

 	private DPFTextGrammarAccess grammarAccess;
 	
    public InternalDPFTextParser(TokenStream input, DPFTextGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected DPFTextGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getModelAccess().getSpecificationParserRuleCall_0()); 
    }
    this_Specification_0=ruleSpecification
    { 
        $current = $this_Specification_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getCommandsCommandParserRuleCall_1_0_0()); 
	    }
		lv_commands_1_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"commands",
        		lv_commands_1_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getCommandsCommandParserRuleCall_1_1_0()); 
	    }
		lv_commands_2_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"commands",
        		lv_commands_2_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)
;





// Entry rule entryRuleVALUE
entryRuleVALUE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVALUERule()); } 
	 iv_ruleVALUE=ruleVALUE 
	 { $current=$iv_ruleVALUE.current.getText(); }  
	 EOF 
;

// Rule VALUE
ruleVALUE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_NUMBER_0=RULE_NUMBER    {
		$current.merge(this_NUMBER_0);
    }

    { 
    newLeafNode(this_NUMBER_0, grammarAccess.getVALUEAccess().getNUMBERTerminalRuleCall_0()); 
    }

    |    this_CHAR_1=RULE_CHAR    {
		$current.merge(this_CHAR_1);
    }

    { 
    newLeafNode(this_CHAR_1, grammarAccess.getVALUEAccess().getCHARTerminalRuleCall_1()); 
    }

    |    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    newLeafNode(this_STRING_2, grammarAccess.getVALUEAccess().getSTRINGTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	 iv_ruleCommand=ruleCommand 
	 { $current=$iv_ruleCommand.current; } 
	 EOF 
;

// Rule Command
ruleCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getInstanceSpecificationParserRuleCall_0()); 
    }
    this_InstanceSpecification_0=ruleInstanceSpecification
    { 
        $current = $this_InstanceSpecification_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getExtSubTGraphParserRuleCall_1()); 
    }
    this_ExtSubTGraph_1=ruleExtSubTGraph
    { 
        $current = $this_ExtSubTGraph_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getMakeEmfParserRuleCall_2()); 
    }
    this_MakeEmf_2=ruleMakeEmf
    { 
        $current = $this_MakeEmf_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getMakeEcoreParserRuleCall_3()); 
    }
    this_MakeEcore_3=ruleMakeEcore
    { 
        $current = $this_MakeEcore_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getMakeImageParserRuleCall_4()); 
    }
    this_MakeImage_4=ruleMakeImage
    { 
        $current = $this_MakeImage_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getSimpleEvoSpanParserRuleCall_5()); 
    }
    this_SimpleEvoSpan_5=ruleSimpleEvoSpan
    { 
        $current = $this_SimpleEvoSpan_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getSimpleEvoCospanParserRuleCall_6()); 
    }
    this_SimpleEvoCospan_6=ruleSimpleEvoCospan
    { 
        $current = $this_SimpleEvoCospan_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getMorphismParserRuleCall_7()); 
    }
    this_Morphism_7=ruleMorphism
    { 
        $current = $this_Morphism_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getEvoSpanParserRuleCall_8()); 
    }
    this_EvoSpan_8=ruleEvoSpan
    { 
        $current = $this_EvoSpan_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getEvoCospanParserRuleCall_9()); 
    }
    this_EvoCospan_9=ruleEvoCospan
    { 
        $current = $this_EvoCospan_9.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMakeEmf
entryRuleMakeEmf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMakeEmfRule()); }
	 iv_ruleMakeEmf=ruleMakeEmf 
	 { $current=$iv_ruleMakeEmf.current; } 
	 EOF 
;

// Rule MakeEmf
ruleMakeEmf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='emf(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMakeEmfAccess().getEmfKeyword_0());
    }
(
(
		lv_id_1_0=RULE_ID
		{
			newLeafNode(lv_id_1_0, grammarAccess.getMakeEmfAccess().getIdIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMakeEmfRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"ID");
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMakeEmfAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleMakeEcore
entryRuleMakeEcore returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMakeEcoreRule()); }
	 iv_ruleMakeEcore=ruleMakeEcore 
	 { $current=$iv_ruleMakeEcore.current; } 
	 EOF 
;

// Rule MakeEcore
ruleMakeEcore returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ecore(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMakeEcoreAccess().getEcoreKeyword_0());
    }
(
(
		lv_id_1_0=RULE_ID
		{
			newLeafNode(lv_id_1_0, grammarAccess.getMakeEcoreAccess().getIdIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMakeEcoreRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"ID");
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMakeEcoreAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleMakeImage
entryRuleMakeImage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMakeImageRule()); }
	 iv_ruleMakeImage=ruleMakeImage 
	 { $current=$iv_ruleMakeImage.current; } 
	 EOF 
;

// Rule MakeImage
ruleMakeImage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='image(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMakeImageAccess().getImageKeyword_0());
    }
(
(
		lv_id_1_0=RULE_ID
		{
			newLeafNode(lv_id_1_0, grammarAccess.getMakeImageAccess().getIdIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMakeImageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"ID");
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMakeImageAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleSimpleEvoSpan
entryRuleSimpleEvoSpan returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleEvoSpanRule()); }
	 iv_ruleSimpleEvoSpan=ruleSimpleEvoSpan 
	 { $current=$iv_ruleSimpleEvoSpan.current; } 
	 EOF 
;

// Rule SimpleEvoSpan
ruleSimpleEvoSpan returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='simpleEvolution(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSimpleEvoSpanAccess().getSimpleEvolutionKeyword_0());
    }
(
(
		lv_lhs_1_0=RULE_ID
		{
			newLeafNode(lv_lhs_1_0, grammarAccess.getSimpleEvoSpanAccess().getLhsIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleEvoSpanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lhs",
        		lv_lhs_1_0, 
        		"ID");
	    }

)
)	otherlv_2='<-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSimpleEvoSpanAccess().getLessThanSignHyphenMinusKeyword_2());
    }
(
(
		lv_diff_3_0=RULE_ID
		{
			newLeafNode(lv_diff_3_0, grammarAccess.getSimpleEvoSpanAccess().getDiffIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleEvoSpanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"diff",
        		lv_diff_3_0, 
        		"ID");
	    }

)
)	otherlv_4='->' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSimpleEvoSpanAccess().getHyphenMinusGreaterThanSignKeyword_4());
    }
(
(
		lv_rhS_5_0=RULE_ID
		{
			newLeafNode(lv_rhS_5_0, grammarAccess.getSimpleEvoSpanAccess().getRhSIDTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleEvoSpanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rhS",
        		lv_rhS_5_0, 
        		"ID");
	    }

)
)	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSimpleEvoSpanAccess().getCommaKeyword_6());
    }
(
(
		lv_typeGraph_7_0=RULE_ID
		{
			newLeafNode(lv_typeGraph_7_0, grammarAccess.getSimpleEvoSpanAccess().getTypeGraphIDTerminalRuleCall_7_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleEvoSpanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeGraph",
        		lv_typeGraph_7_0, 
        		"ID");
	    }

)
)	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSimpleEvoSpanAccess().getRightParenthesisKeyword_8());
    }
)
;





// Entry rule entryRuleSimpleEvoCospan
entryRuleSimpleEvoCospan returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleEvoCospanRule()); }
	 iv_ruleSimpleEvoCospan=ruleSimpleEvoCospan 
	 { $current=$iv_ruleSimpleEvoCospan.current; } 
	 EOF 
;

// Rule SimpleEvoCospan
ruleSimpleEvoCospan returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='simpleEvolution(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSimpleEvoCospanAccess().getSimpleEvolutionKeyword_0());
    }
(
(
		lv_lhs_1_0=RULE_ID
		{
			newLeafNode(lv_lhs_1_0, grammarAccess.getSimpleEvoCospanAccess().getLhsIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleEvoCospanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lhs",
        		lv_lhs_1_0, 
        		"ID");
	    }

)
)	otherlv_2='->' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSimpleEvoCospanAccess().getHyphenMinusGreaterThanSignKeyword_2());
    }
(
(
		lv_joint_3_0=RULE_ID
		{
			newLeafNode(lv_joint_3_0, grammarAccess.getSimpleEvoCospanAccess().getJointIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleEvoCospanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"joint",
        		lv_joint_3_0, 
        		"ID");
	    }

)
)	otherlv_4='<-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSimpleEvoCospanAccess().getLessThanSignHyphenMinusKeyword_4());
    }
(
(
		lv_rhs_5_0=RULE_ID
		{
			newLeafNode(lv_rhs_5_0, grammarAccess.getSimpleEvoCospanAccess().getRhsIDTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleEvoCospanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rhs",
        		lv_rhs_5_0, 
        		"ID");
	    }

)
)	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSimpleEvoCospanAccess().getCommaKeyword_6());
    }
(
(
		lv_typeGraph_7_0=RULE_ID
		{
			newLeafNode(lv_typeGraph_7_0, grammarAccess.getSimpleEvoCospanAccess().getTypeGraphIDTerminalRuleCall_7_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleEvoCospanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeGraph",
        		lv_typeGraph_7_0, 
        		"ID");
	    }

)
)	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSimpleEvoCospanAccess().getRightParenthesisKeyword_8());
    }
)
;





// Entry rule entryRuleEvoSpan
entryRuleEvoSpan returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEvoSpanRule()); }
	 iv_ruleEvoSpan=ruleEvoSpan 
	 { $current=$iv_ruleEvoSpan.current; } 
	 EOF 
;

// Rule EvoSpan
ruleEvoSpan returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='evolution(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEvoSpanAccess().getEvolutionKeyword_0());
    }
(
(
		lv_lhs_1_0=RULE_ID
		{
			newLeafNode(lv_lhs_1_0, grammarAccess.getEvoSpanAccess().getLhsIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEvoSpanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lhs",
        		lv_lhs_1_0, 
        		"ID");
	    }

)
)	otherlv_2='<->' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEvoSpanAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_2());
    }
(
(
		lv_rhs_3_0=RULE_ID
		{
			newLeafNode(lv_rhs_3_0, grammarAccess.getEvoSpanAccess().getRhsIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEvoSpanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rhs",
        		lv_rhs_3_0, 
        		"ID");
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEvoSpanAccess().getCommaKeyword_4());
    }
(
(
		lv_typeGraph_5_0=RULE_ID
		{
			newLeafNode(lv_typeGraph_5_0, grammarAccess.getEvoSpanAccess().getTypeGraphIDTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEvoSpanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeGraph",
        		lv_typeGraph_5_0, 
        		"ID");
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEvoSpanAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleEvoCospan
entryRuleEvoCospan returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEvoCospanRule()); }
	 iv_ruleEvoCospan=ruleEvoCospan 
	 { $current=$iv_ruleEvoCospan.current; } 
	 EOF 
;

// Rule EvoCospan
ruleEvoCospan returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='evolution(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEvoCospanAccess().getEvolutionKeyword_0());
    }
(
(
		lv_lhs_1_0=RULE_ID
		{
			newLeafNode(lv_lhs_1_0, grammarAccess.getEvoCospanAccess().getLhsIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEvoCospanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lhs",
        		lv_lhs_1_0, 
        		"ID");
	    }

)
)	otherlv_2='-><-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEvoCospanAccess().getHyphenMinusGreaterThanSignLessThanSignHyphenMinusKeyword_2());
    }
(
(
		lv_rhs_3_0=RULE_ID
		{
			newLeafNode(lv_rhs_3_0, grammarAccess.getEvoCospanAccess().getRhsIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEvoCospanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rhs",
        		lv_rhs_3_0, 
        		"ID");
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEvoCospanAccess().getCommaKeyword_4());
    }
(
(
		lv_typeGraph_5_0=RULE_ID
		{
			newLeafNode(lv_typeGraph_5_0, grammarAccess.getEvoCospanAccess().getTypeGraphIDTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEvoCospanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeGraph",
        		lv_typeGraph_5_0, 
        		"ID");
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEvoCospanAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleInstanceSpecification
entryRuleInstanceSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceSpecificationRule()); }
	 iv_ruleInstanceSpecification=ruleInstanceSpecification 
	 { $current=$iv_ruleInstanceSpecification.current; } 
	 EOF 
;

// Rule InstanceSpecification
ruleInstanceSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getInstanceSpecificationAccess().getIdIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceSpecificationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInstanceSpecificationAccess().getColonEqualsSignKeyword_1());
    }
	otherlv_2='ISpec' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInstanceSpecificationAccess().getISpecKeyword_2());
    }
	otherlv_3='<' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInstanceSpecificationAccess().getLessThanSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceSpecificationAccess().getModelChoosenSpecficationParserRuleCall_4_0()); 
	    }
		lv_model_4_0=ruleChoosenSpecfication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceSpecificationRule());
	        }
       		set(
       			$current, 
       			"model",
        		lv_model_4_0, 
        		"ChoosenSpecfication");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInstanceSpecificationAccess().getCommaKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceSpecificationAccess().getMetamodelChoosenSpecficationParserRuleCall_6_0()); 
	    }
		lv_metamodel_6_0=ruleChoosenSpecfication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceSpecificationRule());
	        }
       		set(
       			$current, 
       			"metamodel",
        		lv_metamodel_6_0, 
        		"ChoosenSpecfication");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='>' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getInstanceSpecificationAccess().getGreaterThanSignKeyword_7());
    }
	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getInstanceSpecificationAccess().getLeftCurlyBracketKeyword_8());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceSpecificationAccess().getConstraintSemanticsConstraintSemanticParserRuleCall_9_0_0()); 
	    }
		lv_constraintSemantics_9_0=ruleConstraintSemantic		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceSpecificationRule());
	        }
       		add(
       			$current, 
       			"constraintSemantics",
        		lv_constraintSemantics_9_0, 
        		"ConstraintSemantic");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getInstanceSpecificationAccess().getCommaKeyword_9_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceSpecificationAccess().getConstraintSemanticsConstraintSemanticParserRuleCall_9_1_1_0()); 
	    }
		lv_constraintSemantics_11_0=ruleConstraintSemantic		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceSpecificationRule());
	        }
       		add(
       			$current, 
       			"constraintSemantics",
        		lv_constraintSemantics_11_0, 
        		"ConstraintSemantic");
	        afterParserOrEnumRuleCall();
	    }

)
))*)	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getInstanceSpecificationAccess().getRightCurlyBracketKeyword_10());
    }
)
;





// Entry rule entryRuleChoosenSpecfication
entryRuleChoosenSpecfication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChoosenSpecficationRule()); }
	 iv_ruleChoosenSpecfication=ruleChoosenSpecfication 
	 { $current=$iv_ruleChoosenSpecfication.current; } 
	 EOF 
;

// Rule ChoosenSpecfication
ruleChoosenSpecfication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getChoosenSpecficationAccess().getIdIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoosenSpecficationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleConstraintSemantic
entryRuleConstraintSemantic returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintSemanticRule()); }
	 iv_ruleConstraintSemantic=ruleConstraintSemantic 
	 { $current=$iv_ruleConstraintSemantic.current; } 
	 EOF 
;

// Rule ConstraintSemantic
ruleConstraintSemantic returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintSemanticAccess().getIdDpfIdParserRuleCall_0_0()); 
	    }
		lv_id_0_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintSemanticRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstraintSemanticAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintSemanticAccess().getArrowsArrowsParserRuleCall_2_0_0()); 
	    }
		lv_arrows_2_0=ruleArrows		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintSemanticRule());
	        }
       		add(
       			$current, 
       			"arrows",
        		lv_arrows_2_0, 
        		"Arrows");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstraintSemanticAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintSemanticAccess().getArrowsArrowsParserRuleCall_2_1_1_0()); 
	    }
		lv_arrows_4_0=ruleArrows		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintSemanticRule());
	        }
       		add(
       			$current, 
       			"arrows",
        		lv_arrows_4_0, 
        		"Arrows");
	        afterParserOrEnumRuleCall();
	    }

)
))*)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConstraintSemanticAccess().getCommaKeyword_3());
    }
	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getConstraintSemanticAccess().getRightCurlyBracketKeyword_4());
    }
	otherlv_7='=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getConstraintSemanticAccess().getEqualsSignKeyword_5());
    }
(
(
		lv_ocl_8_0=RULE_STRING
		{
			newLeafNode(lv_ocl_8_0, grammarAccess.getConstraintSemanticAccess().getOclSTRINGTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstraintSemanticRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ocl",
        		lv_ocl_8_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleSpecification
entryRuleSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpecificationRule()); }
	 iv_ruleSpecification=ruleSpecification 
	 { $current=$iv_ruleSpecification.current; } 
	 EOF 
;

// Rule Specification
ruleSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Specification' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSpecificationAccess().getSpecificationKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSpecificationAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getTypeChoosenSpecificationParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleChoosenSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"ChoosenSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='<' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSpecificationAccess().getLessThanSignKeyword_3());
    }
(
(
		lv_sequenceNumber_4_0=RULE_INT
		{
			newLeafNode(lv_sequenceNumber_4_0, grammarAccess.getSpecificationAccess().getSequenceNumberINTTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecificationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sequenceNumber",
        		lv_sequenceNumber_4_0, 
        		"INT");
	    }

)
)	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSpecificationAccess().getGreaterThanSignKeyword_5());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSpecificationAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getGraphGraphParserRuleCall_7_0()); 
	    }
		lv_graph_7_0=ruleGraph		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		set(
       			$current, 
       			"graph",
        		lv_graph_7_0, 
        		"Graph");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='Constraints' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSpecificationAccess().getConstraintsKeyword_8());
    }
	otherlv_9='<' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSpecificationAccess().getLessThanSignKeyword_9());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getConstaintSemanticChoosenConstraintSemanticParserRuleCall_10_0()); 
	    }
		lv_constaintSemantic_10_0=ruleChoosenConstraintSemantic		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		set(
       			$current, 
       			"constaintSemantic",
        		lv_constaintSemantic_10_0, 
        		"ChoosenConstraintSemantic");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='>' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getSpecificationAccess().getGreaterThanSignKeyword_11());
    }
	otherlv_12='{' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getSpecificationAccess().getLeftCurlyBracketKeyword_12());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getConstraintsConstraintParserRuleCall_13_0_0()); 
	    }
		lv_constraints_13_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_13_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_14=',' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getSpecificationAccess().getCommaKeyword_13_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getConstraintsConstraintParserRuleCall_13_1_1_0()); 
	    }
		lv_constraints_15_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_15_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_16='}' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getSpecificationAccess().getRightCurlyBracketKeyword_14());
    }
	otherlv_17='}' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getSpecificationAccess().getRightCurlyBracketKeyword_15());
    }
)
;





// Entry rule entryRuleChoosenSpecification
entryRuleChoosenSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChoosenSpecificationRule()); }
	 iv_ruleChoosenSpecification=ruleChoosenSpecification 
	 { $current=$iv_ruleChoosenSpecification.current; } 
	 EOF 
;

// Rule ChoosenSpecification
ruleChoosenSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getChoosenSpecificationAccess().getIdIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoosenSpecificationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleChoosenConstraintSemantic
entryRuleChoosenConstraintSemantic returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChoosenConstraintSemanticRule()); }
	 iv_ruleChoosenConstraintSemantic=ruleChoosenConstraintSemantic 
	 { $current=$iv_ruleChoosenConstraintSemantic.current; } 
	 EOF 
;

// Rule ChoosenConstraintSemantic
ruleChoosenConstraintSemantic returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getChoosenConstraintSemanticAccess().getIdIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoosenConstraintSemanticRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	 iv_ruleConstraint=ruleConstraint 
	 { $current=$iv_ruleConstraint.current; } 
	 EOF 
;

// Rule Constraint
ruleConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintAccess().getSignatureConstraintSignatureParserRuleCall_0_0()); 
	    }
		lv_signature_0_0=ruleConstraintSignature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintRule());
	        }
       		set(
       			$current, 
       			"signature",
        		lv_signature_0_0, 
        		"ConstraintSignature");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstraintAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintAccess().getArrowsArrowsParserRuleCall_2_0_0()); 
	    }
		lv_arrows_2_0=ruleArrows		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintRule());
	        }
       		add(
       			$current, 
       			"arrows",
        		lv_arrows_2_0, 
        		"Arrows");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstraintAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintAccess().getArrowsArrowsParserRuleCall_2_1_1_0()); 
	    }
		lv_arrows_4_0=ruleArrows		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintRule());
	        }
       		add(
       			$current, 
       			"arrows",
        		lv_arrows_4_0, 
        		"Arrows");
	        afterParserOrEnumRuleCall();
	    }

)
))*)	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConstraintAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleConstraintSignature
entryRuleConstraintSignature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintSignatureRule()); }
	 iv_ruleConstraintSignature=ruleConstraintSignature 
	 { $current=$iv_ruleConstraintSignature.current; } 
	 EOF 
;

// Rule ConstraintSignature
ruleConstraintSignature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintSignatureAccess().getIdDpfIdParserRuleCall_0_0()); 
	    }
		lv_id_0_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintSignatureRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstraintSignatureAccess().getLeftParenthesisKeyword_1());
    }
((
(
		lv_parameter_2_0=RULE_ID
		{
			newLeafNode(lv_parameter_2_0, grammarAccess.getConstraintSignatureAccess().getParameterIDTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstraintSignatureRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"parameter",
        		lv_parameter_2_0, 
        		"ID");
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstraintSignatureAccess().getCommaKeyword_2_1_0());
    }
(
(
		lv_parameter_4_0=RULE_ID
		{
			newLeafNode(lv_parameter_4_0, grammarAccess.getConstraintSignatureAccess().getParameterIDTerminalRuleCall_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstraintSignatureRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"parameter",
        		lv_parameter_4_0, 
        		"ID");
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConstraintSignatureAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleMorphism
entryRuleMorphism returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMorphismRule()); }
	 iv_ruleMorphism=ruleMorphism 
	 { $current=$iv_ruleMorphism.current; } 
	 EOF 
;

// Rule Morphism
ruleMorphism returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_ID_0=RULE_ID
    { 
    newLeafNode(this_ID_0, grammarAccess.getMorphismAccess().getIDTerminalRuleCall_0()); 
    }
	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMorphismAccess().getColonEqualsSignKeyword_1());
    }
	otherlv_2='Morphism' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMorphismAccess().getMorphismKeyword_2());
    }
	otherlv_3='<' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMorphismAccess().getLessThanSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMorphismAccess().getDomainDomainParserRuleCall_4_0()); 
	    }
		lv_domain_4_0=ruleDomain		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMorphismRule());
	        }
       		set(
       			$current, 
       			"domain",
        		lv_domain_4_0, 
        		"Domain");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMorphismAccess().getCommaKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMorphismAccess().getCodmainCodomainParserRuleCall_6_0()); 
	    }
		lv_codmain_6_0=ruleCodomain		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMorphismRule());
	        }
       		set(
       			$current, 
       			"codmain",
        		lv_codmain_6_0, 
        		"Codomain");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='>' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMorphismAccess().getGreaterThanSignKeyword_7());
    }
	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMorphismAccess().getLeftCurlyBracketKeyword_8());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMorphismAccess().getMappingsMappingParserRuleCall_9_0_0()); 
	    }
		lv_mappings_9_0=ruleMapping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMorphismRule());
	        }
       		add(
       			$current, 
       			"mappings",
        		lv_mappings_9_0, 
        		"Mapping");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMorphismAccess().getCommaKeyword_9_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMorphismAccess().getMappingsMappingParserRuleCall_9_1_1_0()); 
	    }
		lv_mappings_11_0=ruleMapping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMorphismRule());
	        }
       		add(
       			$current, 
       			"mappings",
        		lv_mappings_11_0, 
        		"Mapping");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getMorphismAccess().getRightCurlyBracketKeyword_10());
    }
)
;





// Entry rule entryRuleDomain
entryRuleDomain returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainRule()); }
	 iv_ruleDomain=ruleDomain 
	 { $current=$iv_ruleDomain.current; } 
	 EOF 
;

// Rule Domain
ruleDomain returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getDomainAccess().getIdIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDomainRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleCodomain
entryRuleCodomain returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCodomainRule()); }
	 iv_ruleCodomain=ruleCodomain 
	 { $current=$iv_ruleCodomain.current; } 
	 EOF 
;

// Rule Codomain
ruleCodomain returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getCodomainAccess().getIdIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCodomainRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleMapping
entryRuleMapping returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMappingRule()); }
	 iv_ruleMapping=ruleMapping 
	 { $current=$iv_ruleMapping.current; } 
	 EOF 
;

// Rule Mapping
ruleMapping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMappingAccess().getMappingNodeParserRuleCall_0()); 
    }
    this_MappingNode_0=ruleMappingNode
    { 
        $current = $this_MappingNode_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMappingAccess().getMappingArrowParserRuleCall_1()); 
    }
    this_MappingArrow_1=ruleMappingArrow
    { 
        $current = $this_MappingArrow_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMappingNode
entryRuleMappingNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMappingNodeRule()); }
	 iv_ruleMappingNode=ruleMappingNode 
	 { $current=$iv_ruleMappingNode.current; } 
	 EOF 
;

// Rule MappingNode
ruleMappingNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMappingNodeAccess().getDomainNodeParserRuleCall_0_0()); 
	    }
		lv_domain_0_0=ruleNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingNodeRule());
	        }
       		set(
       			$current, 
       			"domain",
        		lv_domain_0_0, 
        		"Node");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMappingNodeAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingNodeAccess().getCodomainNodeParserRuleCall_2_0()); 
	    }
		lv_codomain_2_0=ruleNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingNodeRule());
	        }
       		set(
       			$current, 
       			"codomain",
        		lv_codomain_2_0, 
        		"Node");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMappingArrow
entryRuleMappingArrow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMappingArrowRule()); }
	 iv_ruleMappingArrow=ruleMappingArrow 
	 { $current=$iv_ruleMappingArrow.current; } 
	 EOF 
;

// Rule MappingArrow
ruleMappingArrow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMappingArrowAccess().getDomainArrowParserRuleCall_0_0()); 
	    }
		lv_domain_0_0=ruleArrow		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingArrowRule());
	        }
       		set(
       			$current, 
       			"domain",
        		lv_domain_0_0, 
        		"Arrow");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMappingArrowAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingArrowAccess().getCodmainArrowParserRuleCall_2_0()); 
	    }
		lv_codmain_2_0=ruleArrow		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingArrowRule());
	        }
       		set(
       			$current, 
       			"codmain",
        		lv_codmain_2_0, 
        		"Arrow");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExtSubTGraph
entryRuleExtSubTGraph returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtSubTGraphRule()); }
	 iv_ruleExtSubTGraph=ruleExtSubTGraph 
	 { $current=$iv_ruleExtSubTGraph.current; } 
	 EOF 
;

// Rule ExtSubTGraph
ruleExtSubTGraph returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getExtSubTGraphAccess().getIdIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExtSubTGraphRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExtSubTGraphAccess().getColonEqualsSignKeyword_1());
    }
	otherlv_2='ExtSubTGraph' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExtSubTGraphAccess().getExtSubTGraphKeyword_2());
    }
	otherlv_3='<' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExtSubTGraphAccess().getLessThanSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtSubTGraphAccess().getExtendsGraphChoosenExtSubTGraphParserRuleCall_4_0()); 
	    }
		lv_extendsGraph_4_0=ruleChoosenExtSubTGraph		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtSubTGraphRule());
	        }
       		set(
       			$current, 
       			"extendsGraph",
        		lv_extendsGraph_4_0, 
        		"ChoosenExtSubTGraph");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExtSubTGraphAccess().getGreaterThanSignKeyword_5());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getExtSubTGraphAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtSubTGraphAccess().getElementsElementParserRuleCall_7_0()); 
	    }
		lv_elements_7_0=ruleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtSubTGraphRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_7_0, 
        		"Element");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getExtSubTGraphAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleChoosenExtSubTGraph
entryRuleChoosenExtSubTGraph returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChoosenExtSubTGraphRule()); }
	 iv_ruleChoosenExtSubTGraph=ruleChoosenExtSubTGraph 
	 { $current=$iv_ruleChoosenExtSubTGraph.current; } 
	 EOF 
;

// Rule ChoosenExtSubTGraph
ruleChoosenExtSubTGraph returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getChoosenExtSubTGraphAccess().getIdIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoosenExtSubTGraphRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleGraph
entryRuleGraph returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGraphRule()); }
	 iv_ruleGraph=ruleGraph 
	 { $current=$iv_ruleGraph.current; } 
	 EOF 
;

// Rule Graph
ruleGraph returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Graph' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGraphAccess().getGraphKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGraphAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGraphAccess().getElementsElementParserRuleCall_2_0()); 
	    }
		lv_elements_2_0=ruleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraphRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"Element");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGraphAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	 iv_ruleElement=ruleElement 
	 { $current=$iv_ruleElement.current; } 
	 EOF 
;

// Rule Element
ruleElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getElementAccess().getNodeParserRuleCall_0_0()); 
    }
    this_Node_0=ruleNode
    { 
        $current = $this_Node_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getElementAccess().getCommaKeyword_0_1());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getElementAccess().getArrowsParserRuleCall_1_0()); 
    }
    this_Arrows_2=ruleArrows
    { 
        $current = $this_Arrows_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getElementAccess().getCommaKeyword_1_1());
    }
))
;





// Entry rule entryRuleArrows
entryRuleArrows returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrowsRule()); }
	 iv_ruleArrows=ruleArrows 
	 { $current=$iv_ruleArrows.current; } 
	 EOF 
;

// Rule Arrows
ruleArrows returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getArrowsAccess().getSrNodeParserRuleCall_0_0_0()); 
	    }
		lv_sr_0_0=ruleNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowsRule());
	        }
       		set(
       			$current, 
       			"sr",
        		lv_sr_0_0, 
        		"Node");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrowsAccess().getHyphenMinusKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowsAccess().getIdDpfIdParserRuleCall_0_2_0()); 
	    }
		lv_id_2_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowsRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrowsAccess().getColonKeyword_0_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowsAccess().getTypeDpfIdParserRuleCall_0_4_0()); 
	    }
		lv_type_4_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowsRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='->' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArrowsAccess().getHyphenMinusGreaterThanSignKeyword_0_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowsAccess().getNextArrowsParserRuleCall_0_6_0()); 
	    }
		lv_next_6_0=ruleArrows		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowsRule());
	        }
       		set(
       			$current, 
       			"next",
        		lv_next_6_0, 
        		"Arrows");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getArrowsAccess().getArrowParserRuleCall_1()); 
    }
    this_Arrow_7=ruleArrow
    { 
        $current = $this_Arrow_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleArrow
entryRuleArrow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrowRule()); }
	 iv_ruleArrow=ruleArrow 
	 { $current=$iv_ruleArrow.current; } 
	 EOF 
;

// Rule Arrow
ruleArrow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getSrNodeParserRuleCall_0_0_0()); 
	    }
		lv_sr_0_0=ruleNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"sr",
        		lv_sr_0_0, 
        		"Node");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrowAccess().getHyphenMinusKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getIdDpfIdParserRuleCall_0_2_0()); 
	    }
		lv_id_2_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrowAccess().getColonKeyword_0_3());
    }
	otherlv_4='*' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrowAccess().getAsteriskKeyword_0_4());
    }
	otherlv_5='->' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArrowAccess().getHyphenMinusGreaterThanSignKeyword_0_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getTgDataTypeDataTypeEnumRuleCall_0_6_0()); 
	    }
		lv_tgDataType_6_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"tgDataType",
        		lv_tgDataType_6_0, 
        		"DataType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getSrNodeParserRuleCall_1_0_0()); 
	    }
		lv_sr_7_0=ruleNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"sr",
        		lv_sr_7_0, 
        		"Node");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='-' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getArrowAccess().getHyphenMinusKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getIdDpfIdParserRuleCall_1_2_0()); 
	    }
		lv_id_9_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_9_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=':' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getArrowAccess().getColonKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getTypeDpfIdParserRuleCall_1_4_0()); 
	    }
		lv_type_11_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_11_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_12='->' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getArrowAccess().getHyphenMinusGreaterThanSignKeyword_1_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getTgValueAttributeValueParserRuleCall_1_6_0()); 
	    }
		lv_tgValue_13_0=ruleAttributeValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"tgValue",
        		lv_tgValue_13_0, 
        		"AttributeValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getSrNodeParserRuleCall_2_0_0()); 
	    }
		lv_sr_14_0=ruleNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"sr",
        		lv_sr_14_0, 
        		"Node");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_15='-' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getArrowAccess().getHyphenMinusKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getIdDpfIdParserRuleCall_2_2_0()); 
	    }
		lv_id_16_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_16_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_17=':' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getArrowAccess().getColonKeyword_2_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getTypeDpfIdParserRuleCall_2_4_0()); 
	    }
		lv_type_18_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_18_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_19='->' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getArrowAccess().getHyphenMinusGreaterThanSignKeyword_2_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getTgNodeNodeParserRuleCall_2_6_0()); 
	    }
		lv_tgNode_20_0=ruleNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"tgNode",
        		lv_tgNode_20_0, 
        		"Node");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	 iv_ruleNode=ruleNode 
	 { $current=$iv_ruleNode.current; } 
	 EOF 
;

// Rule Node
ruleNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getIdDpfIdParserRuleCall_0_0()); 
	    }
		lv_id_0_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNodeAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getTypeDpfIdParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAttributeValue
entryRuleAttributeValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeValueRule()); }
	 iv_ruleAttributeValue=ruleAttributeValue 
	 { $current=$iv_ruleAttributeValue.current; } 
	 EOF 
;

// Rule AttributeValue
ruleAttributeValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAttributeValueAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeValueAccess().getValueVALUEParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleVALUE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"VALUE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttributeValueAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleDpfId
entryRuleDpfId returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDpfIdRule()); }
	 iv_ruleDpfId=ruleDpfId 
	 { $current=$iv_ruleDpfId.current; } 
	 EOF 
;

// Rule DpfId
ruleDpfId returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getDpfIdAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDpfIdRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(	otherlv_1='@' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDpfIdAccess().getCommercialAtKeyword_1_0());
    }
(
(
		lv_id_2_0=RULE_INT
		{
			newLeafNode(lv_id_2_0, grammarAccess.getDpfIdAccess().getIdINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDpfIdRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"INT");
	    }

)
))?)
;





// Rule DataType
ruleDataType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Boolean' 
	{
        $current = grammarAccess.getDataTypeAccess().getTBOOLEANEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDataTypeAccess().getTBOOLEANEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Char' 
	{
        $current = grammarAccess.getDataTypeAccess().getTCHAREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDataTypeAccess().getTCHAREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Byte' 
	{
        $current = grammarAccess.getDataTypeAccess().getTBYTEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getDataTypeAccess().getTBYTEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Short' 
	{
        $current = grammarAccess.getDataTypeAccess().getTSHORTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getDataTypeAccess().getTSHORTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='Int' 
	{
        $current = grammarAccess.getDataTypeAccess().getTINTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getDataTypeAccess().getTINTEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='Long' 
	{
        $current = grammarAccess.getDataTypeAccess().getTLONGEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getDataTypeAccess().getTLONGEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='Float' 
	{
        $current = grammarAccess.getDataTypeAccess().getTFLOATEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getDataTypeAccess().getTFLOATEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='Double' 
	{
        $current = grammarAccess.getDataTypeAccess().getTDOUBLEEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getDataTypeAccess().getTDOUBLEEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='String' 
	{
        $current = grammarAccess.getDataTypeAccess().getTSTRINGEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getDataTypeAccess().getTSTRINGEnumLiteralDeclaration_8()); 
    }
));



RULE_CHAR : '\'' RULE_ANY_OTHER '\'';

RULE_NUMBER : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


