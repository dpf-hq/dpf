//Services and services

//Type Graph as Metamodel
TG:=TGraph<DPF>{
    Transition:n-inArr:id->Place:n,
    Transition:n-outArr:id->Place:n,
    Transition:n-name:*->String,
    Place:n-name:*->String,
    Place:n-token:id->Token:n,
}

G:=TGraph<TG>{
	
	ToBob:Transition-a:outArr->Bob:Place,
	ToBob:Transition-b:inArr->Alice:Place,
	ToAlice:Transition-c:outArr->Alice:Place,
	ToAlice:Transition-d:inArr->Bob:Place,
	Bob:Place-e:token->t:Token,
	ToBob:Transition-f:name->["To Bob"],
	ToAlice:Transition-g:name->["To Alice"],
	Bob:Place-h:name->["Bob"],
	Alice:Place-i:name->["Alice"],

}


//Rule Graphs:
TL:=ExtSubTGraph<TG>{
    Transition:n-outArr:id->Place:n,
}

TK:=ExtSubTGraph<TL>{
    Transition:n,Place:n,
}

TR:=ExtSubTGraph<TK>{
    OutArr:n-src:id->Transition:n,
    OutArr:n-trg:id->Place:n,
}

//Perform Evolution:
simpleEvolution(TL<-TK->TR,G)
