//Services and services

//Type Graph as Metamodel
MM:=TGraph<DPF>{
    Server:Node-communicates:Arrow->Server:Node,
    Server:Node-provides:Arrow->Service:Node,
    Server:Node-has:Arrow->SecurityPolice:Node,
}

MMS:=Spec<MM>{
    min(1){Server:Node-provides:Arrow->Service:Node,}, 
    min(100){Bla:Node-jojsd:Arrow->Service:Node,}, 
    irr(){Server:Node-communicates:Arrow->Server:Node,}
}

"Serialisation" of DPF models into this syntax:

Spec1:TGraph<DPF>{
  Graph{
    Server:Node-communicates:Arrow->Server:Node,
    Server:Node-provides:Arrow->Service:Node,
    Server:Node-has:Arrow->SecurityPolice:Node,
  }
  Constraints<Sig2>{
    min(1){Server:Node-provides:Arrow->Service:Node,}, 
    irr(){Server:Node-communicates:Arrow->Server:Node,}
  }
}

Sig2:Signature<TGraph<DPF>>{
  min{x:_-y:_->z:_,}=$context #x# inv: #y#->size() >= #0#$, 
  irr{x:_-y:_->z:_,}=$context #x# inv: not #y#->includes(self)$ %Fokkifokk! #x# #-y#%
}

Spec0:TGraph<Spec1>{
  Graph{
    Server1:Server-c1:communicates->Server2:Server,
  }
  Constraints<Sig1>{
    min(1){Server:Node-provides:Arrow->Service:Node,}, 
    irr(){Server:Node-communicates:Arrow->Server:Node,}
  }
}

Sig1:Signature<TGraph<DPF>>{
  min{x:_-y:_->z:_,}=$context #x# inv: #y#->size() >= #0#$, 
  irr{x:_-y:_->z:_,}=$context #x# inv: not #y#->includes(self)$
}



Spec{S} = (ugraph{S}, constraints{S}: sig{Sig1})

M:=TGraph<MM>{
	
	//FileServer:
	FileServer:Server-a:provides->SSH:Service,
	FileServer:Server-b:provides->SFTP:Service,
	FileServer:Server-c:has->OSLogin:SecurityPolice,
	
	//Login Server:
	LoginServer:Server-d:provides->AppClientConnector:Service,
	LoginServer:Server-e:provides->WebInterface:Service,
	LoginServer:Server-f:has->RemoteLogin:SecurityPolice,
	LoginServer:Server-g:has->RSA:SecurityPolice,
	LoginServer:Server-h:communicates->FileServer:Server,
	
}


MIS:=ISpec<M,MMS>{
    min{x:_-y:_->z:_,}=$context #x# inv: #y#->size() >= #0#$, 
    irr{x:_-y:_->z:_,}=$context #x# inv: not #y#->includes(self)$
}


//ecore(MM)

image(MM)

image(M)
