/*
* generated by Xtext
*/
package no.hib.dpf.text.ui.outline;

import no.hib.dpf.text.tdpf.Arrow;
import no.hib.dpf.text.tdpf.Definition;
import no.hib.dpf.text.tdpf.Model;
import no.hib.dpf.text.tdpf.Node;
import no.hib.dpf.text.tdpf.TdpfPackage;

import org.eclipse.swt.graphics.Image;
import org.eclipse.xtext.ui.IImageHelper;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode;
import org.eclipse.xtext.ui.editor.outline.impl.EObjectNode;

import com.google.inject.Inject;

/**
 * customization of the default outline structure
 * TODO Call scala wrapper from here:
 */
public class DPFTextOutlineTreeProvider extends DefaultOutlineTreeProvider {
	
	@Inject
    private IImageHelper imageHelper;
	
	protected void _createChildren(DocumentRootNode parentNode, Model model) {
		System.out.println("Test1");
        for(Definition d: model.getDefinitions()) {
        	System.out.println("Test1-1" + d);
            createNode(parentNode, d);
        }         
    }
		
//    protected void _createNode(IOutlineNode parentNode, Arrow arrow) {
//    	
//    }	

	protected void _createNode(IOutlineNode parentNode, Node node) {
		_createNode(parentNode,node,_image(node));
	}
	protected void _createNode(IOutlineNode parentNode, Node node, Image image) {
		EObjectNode n = createEObjectNode(parentNode, node.eClass());
		n.setImage(_image(node));
		n.setText("");
//		createEStructuralFeatureNode(parentNode, owner, feature, image, text, isLeaf)
		createEStructuralFeatureNode(
				parentNode,
				node,
				node.eClass().getEStructuralFeature(TdpfPackage.NODE__ID),
				null, //Image for ID?
				"id=" + node.getId().getId() + "@" + node.getId().getName(),
				true);
		createEStructuralFeatureNode(
				parentNode,
				node,
				node.eClass().getEStructuralFeature(TdpfPackage.NODE__TYPE),
				null,//Image for type
				"type=" + node.getType().getId() + "@" + node.getType().getName(),
				true);
	}	

	protected void _createNode(IOutlineNode parentNode, Arrow arrow) {
		EObjectNode n = createEObjectNode(parentNode, arrow.eClass());
		n.setImage(_image(arrow));
		n.setText("");
//		createEStructuralFeatureNode(parentNode, owner, feature, image, text, isLeaf)
		createEStructuralFeatureNode(
				parentNode,
				arrow,
				arrow.eClass().getEStructuralFeature(TdpfPackage.ARROW__ID),
				null, //Image for ID?
				"id=" + arrow.getId().getId() + "@" + arrow.getId().getName(),
				true);
		createEStructuralFeatureNode(
				parentNode,
				arrow,
				arrow.eClass().getEStructuralFeature(TdpfPackage.ARROW__TYPE),
				null,//Image for type
				"type=" + arrow.getType().getId() + "@" + arrow.getType().getName(),
				true);
		//Source:
		createEStructuralFeatureNode(
				parentNode,
				arrow,
				arrow.eClass().getEStructuralFeature(TdpfPackage.ARROW__SR),
				null, //Image for ID?
				"source=" + arrow.getSr().getId().getId() + "@" + arrow.getSr().getId().getName(),
				false);
		//Target:
		if(null != arrow.getTgNode()){
		createEStructuralFeatureNode(
				parentNode,
				arrow,
				arrow.eClass().getEStructuralFeature(TdpfPackage.ARROW__TG_NODE),
				null,//Image for type
				"target=" + arrow.getTgNode().getId().getId() + "@" + arrow.getTgNode().getId().getName(),
				false);
		}
		else if(null != arrow.getTgDataType()){
		createEStructuralFeatureNode(
				parentNode,
				arrow,
				arrow.eClass().getEStructuralFeature(TdpfPackage.ARROW__TG_DATA_TYPE),
				null,//Image for type
				"target=" + arrow.getTgDataType().getName(),
				false);
		}
		else if(null != arrow.getTgValue()){
		createEStructuralFeatureNode(
				parentNode,
				arrow,
				arrow.eClass().getEStructuralFeature(TdpfPackage.ARROW__TG_VALUE),
				null,//Image for type
				"target=" + arrow.getTgValue().getValue(),
				false);
		}
	}	
	
	protected Image _image(Node node) {
        return this.imageHelper.getImage("node.png");
    }

	protected Image _image(Arrow arrow) {
        return this.imageHelper.getImage("arrow.png");
    }
	
}
