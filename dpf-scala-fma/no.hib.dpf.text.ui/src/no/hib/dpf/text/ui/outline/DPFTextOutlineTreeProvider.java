/*
 * generated by Xtext
 */
package no.hib.dpf.text.ui.outline;

import no.hib.dpf.text.tdpf.Arrow;
import no.hib.dpf.text.tdpf.Definition;
import no.hib.dpf.text.tdpf.Model;
import no.hib.dpf.text.tdpf.TGraphName;

import org.eclipse.jface.viewers.StyledString;
import org.eclipse.swt.graphics.Image;
import org.eclipse.xtext.resource.ILocationInFileProvider;
import org.eclipse.xtext.ui.IImageHelper;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode;
import org.eclipse.xtext.ui.editor.outline.impl.EObjectNode;

import com.google.inject.Inject;

/**
 * customization of the default outline structure TODO Call scala wrapper from
 * here:
 */
public class DPFTextOutlineTreeProvider extends DefaultOutlineTreeProvider {

//	@Inject
//	private IImageHelper imageHelper;

	@Inject
	protected ILocationInFileProvider locationInFileProvider;
	
	protected void _createChildren(DocumentRootNode parentNode, Model model) {
		for (Definition d : model.getDefinitions()) {
			createNode(parentNode, d);
		}
	}

	//
	// Graph:
	//
	protected void _createNode(IOutlineNode parentNode, TGraphName name) {
	}

	//
	// Arrow:
	//
	/**
	 * Create Arrow for outline view:
	 * @param parentNode
	 * @param arrow
	 */
	protected void _createNode(IOutlineNode parentNode, Arrow arrow) {
//		EObjectNode n = createEObjectNode(parentNode, arrow.eClass());
		Image image = imageDispatcher.invoke(arrow);
		EObjectNode eObjectNode = new EObjectNode(arrow, parentNode, image, makeLabel(arrow), true);
		eObjectNode.setShortTextRegion(locationInFileProvider.getSignificantTextRegion(arrow));
	}
	
	/**
	 * Make Label
	 * @param arrow
	 * @return
	 */
	protected StyledString makeLabel(Arrow arrow) {
		final String id = arrow.getId().getId() + "@" + arrow.getId().getName() + ":" 
						 + arrow.getType().getName() + "@" + arrow.getType().getId();
		final String sr = arrow.getSr().getId().getId() + "@" + arrow.getSr().getId().getName() + ":" 
					     + arrow.getSr().getType().getName() + "@" + arrow.getSr().getType().getId();
		String tg = "";		
		//Target:
		if(null != arrow.getTgNode()){
			tg = arrow.getTgNode().getId().getId() + "@" + arrow.getTgNode().getId().getName() + ":"
			   + arrow.getTgNode().getType().getName() + "@" + arrow.getTgNode().getType().getId();
		}
		else if(null != arrow.getTgValue()){
			tg = arrow.getTgValue().getValue();
		}
		else if(null != arrow.getTgDataType()){
			tg = arrow.getTgDataType().getName() + ":Datatype";
		}		
		final StyledString ret = new StyledString(sr + " --- " + id + " ---> " + tg);
		ret.setStyle(sr.length() + 1,tg.length()+11, StyledString.COUNTER_STYLER);
		return ret;
	}

}
