import no::hib::dpf::core;
extension org::eclipse::xtend::util::stdlib::io;
extension org::eclipse::xtend::util::stdlib::globalvar;

String bleh() : syserr(((String)GLOBALVAR generateAnnotations));

getter(core::Node this) :
	"get" + this.name.toFirstUpper();

setter(core::Node this) :
	"set" + this.name.toFirstUpper();
	
String paramList(List[core::Arrow] this) :
	JAVA no.hib.dpf.codegen.generator.extensions.play.StringUtil.getAttributeList(java.util.List);
	
String constructorSetAttributes(List[core::Arrow] this) : 
	JAVA no.hib.dpf.codegen.generator.extensions.play.StringUtil.getConstructorSetters(java.util.List);

Void printConstraints(List[core::Constraint] c) :
	JAVA no.hib.dpf.codegen.generator.extensions.play.StringUtil.printConstraints(java.util.List);
	
//checkAndPrintArrayImport(core::Node n) :
//	let multConstraints = getMultConstraints() : //Hent alle multiplisitetconstraints 
//		if multConstraints.exists(e | e.getConstrainedNodes().exists(ca | ca.id == n.id && ca.)
//			&& e.parameters != "-1,1") then//For kvar multconstraint i constNodes vel vi nodar
//			"import java.util.ArrayList;";																		//i constraints og sjekkar om id'en finst
	
String printArrayImport(List[core::Arrow] n) :
	JAVA no.hib.dpf.codegen.generator.extensions.play.StringUtil.printArrayImport(java.util.List);
		
String getDomainClassAttributes(List[core::Arrow] a) :
	JAVA no.hib.dpf.codegen.generator.extensions.play.StringUtil.getDomainClassAttributes(java.util.List);
	
String getModelOutput(String name) :
	syserr(getModelOutputDir()) ->
	getModelOutputDir() + name.toFirstUpper() + ".java";
	
List[core::Node] getDomainClasses() :
	(List[core::Node]) getGlobalVar("domainClasses");

List[core::Node] getControllers() :
	(List[core::Node]) getGlobalVar("controllers");

List[core::Node] getPackages() :
	(List[core::Node]) getGlobalVar("packages");
	
List[core::Constraint] getMultConstraints() :
	(List[core::Constraint]) getGlobalVar("multConstraints");
	
String getModelOutputDir() :
	(String) getGlobalVar("modelOutputPath");
	
String getControllerOutputDir() :
	(String) getGlobalVar("controllerOutputPath");
		
	