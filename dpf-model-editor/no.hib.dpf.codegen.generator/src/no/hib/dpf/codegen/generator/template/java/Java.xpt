«IMPORT no::hib::dpf::core»
«EXTENSION no::hib::dpf::codegen::generator::extensions::play::TemplateUtil»

«DEFINE main FOR core::Specification»
	«EXPAND graph FOR this.graph»
«ENDDEFINE»

«DEFINE graph FOR core::Graph»
	«EXPAND DomainClass FOREACH nodes»
«ENDDEFINE»

«DEFINE DomainClass FOR core::Node»
	«IF this.getTypeName() == "Domain Class"»
		«FILE name + ".java"»
			«EXPAND imports FOREACH this.getOutgoingArrows().target»
			public class «this.name» {
				«EXPAND attr FOREACH this.getOutgoingArrows().target»
				public «this.name»() {
				}
				public «this.name»(«paramList(this.getOutgoingArrows())») {
				}
				
				«EXPAND gettersAndSetters FOREACH this.getOutgoingArrows().target»
			}
		«ENDFILE»
	«ENDIF»
«ENDDEFINE»

«DEFINE imports FOR core::Node»
	«IF this.getTypeName() == "Date"»
		import java.util.Date;
	«ENDIF»
«ENDDEFINE»

«DEFINE attr FOR core::Node»
	«IF this.getTypeName() != "Domain Class"»
		private «this.getTypeName()» «this.name.toFirstLower()»;
	«ELSE»
		private «this.name.toFirstUpper()» «this.name.toFirstLower()»;
	«ENDIF»
«ENDDEFINE»

«DEFINE inititateAttributes(Boolean isnull) FOR core::Node»
	«IF isnull»
		this.«this.name.toFirstLower()»;
	«ELSE»
	
	«ENDIF»
«ENDDEFINE»

«DEFINE gettersAndSetters FOR core::Node»
	«IF this.getTypeName() != "Domain Class"»
		public «this.getTypeName()» «getter(this)»() {
			return «this.name.toFirstLower()»;
		}
		
		public void «setter(this)»(«this.getTypeName()» «this.name.toFirstLower()») {
			this.«this.name.toFirstLower()» = «this.name.toFirstLower()»;
		}
	«ELSE»
		public «this.name.toFirstUpper()» «getter(this)»() {
			return «this.name.toFirstLower()»;
		}
		
		public void «setter(this)»(«this.name.toFirstUpper()» «this.name.toFirstLower()») {
			this.«this.name.toFirstLower()» = «this.name.toFirstLower()»;
		}
	«ENDIF»
«ENDDEFINE»